{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Convex's blog For full documentation visit convex .","title":"Home"},{"location":"#welcome-to-convexs-blog","text":"For full documentation visit convex .","title":"Welcome to Convex's blog"},{"location":"about/","text":"Testing.","title":"About"},{"location":"namespaces/","text":"NameSpaces A namespace wraps a global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource. Changes to the global resource are visible to other processes that are members of the namespace, but are invisible to other processes. One use of namespaces is to implement containers. Linux provides the following namespaces: Namespace Constant Isolates Cgroup CLONE_NEWCGROUP Cgroup root directory IPC CLONE_NEWIPC System V IPC, POSIX message queues Network CLONE_NEWNET Network devices, stacks, ports, etc. Mount CLONE_NEWNS Mount points PID CLONE_NEWPID Process IDs User CLONE_NEWUSER User and group IDs UTS CLONE_NEWUTS Hostname and NIS domain name cgroup namespace cgroup Linux control groups. Control cgroups, usually referred to as cgroups, are a Linux kernel feature which allow processes to be organized into hierarchical groups whose usage of various types of resources can then be limited and monitored. The kernel's cgroup interface is provided through a pseudo-filesystem called cgroupfs. Grouping is implemented in the core cgroup kernel code, while resource tracking and limits are implemented in a set of per-resource-type subsystems (memory, CPU, and so on). IPC namespaces IPC namespaces isolate certain IPC resources, namely, System V IPC objects (see svipc(7)) and (since Linux 2.6.30) POSIX message queues (see mq_overview(7)). The common characteristic of these IPC mechanisms is that IPC objects are identified by mechanisms other than filesystem pathnames. Each IPC namespace has its own set of System V IPC identifiers and its own POSIX message queue filesystem. Objects created in an IPC namespace are visible to all other processes that are members of that namespace, but are not visible to processes in other IPC namespaces. Network namespaces Network namespaces provide isolation of the system resources associated with networking: network devices, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net directory (which is a symbolic link to /proc/PID/net), the /sys/class/net directory, various files under /proc/sys/net, port numbers (sockets), and so on. In addition, network namespaces isolate the UNIX domain abstract socket namespace (see unix(7)). A physical network device can live in exactly one network namespace. When a network namespace is freed (i.e., when the last process in the namespace terminates), its physical network devices are moved back to the initial network namespace (not to the parent of the process). A virtual network (veth(4)) device pair provides a pipe-like abstraction that can be used to create tunnels between network namespaces, and can be used to create a bridge to a physical network device in another namespace. When a namespace is freed, the veth(4) devices that it contains are destroyed. Use of network namespaces requires a kernel that is configured with the CONFIG_NET_NS option. Mount namespaces Mount namespaces provide isolation of the list of mount points seen by the processes in each namespace instance. Thus, the processes in each of the mount namespace instances will see distinct single-directory hierarchies. The views provided by the /proc/[pid]/mounts, /proc/[pid]/mountinfo, and /proc/[pid]/mountstats files (all described in proc(5)) correspond to the mount namespace in which the process with the PID [pid] resides. (All of the processes that reside in the same mount namespace will see the same view in these files.) When a process creates a new mount namespace using clone(2) or unshare(2) with the CLONE_NEWNS flag, the mount point list for the new namespace is a copy of the caller's mount point list. Subsequent modifications to the mount point list (mount(2) and umount(2)) in either mount namespace will not (by default) affect the mount point list seen in the other namespace (but see the following discussion of shared subtrees). PID namespaces PID namespaces isolate the process ID number space, meaning that processes in different PID namespaces can have the same PID. PID namespaces allow containers to provide func tionality such as suspending/resuming the set of processes in the container and migrating the container to a new host while the processes inside the container maintain the same PIDs. PIDs in a new PID namespace start at 1, somewhat like a standalone system, and calls to fork(2), vfork(2), or clone(2) will produce processes with PIDs that are unique within the namespace. Use of PID namespaces requires a kernel that is configured with the CONFIG_PID_NS option. User namespaces User namespaces isolate security-related identifiers and attributes, in particular, user IDs and group IDs (see credentials(7)), the root directory, keys (see keyrings(7)), and capabilities (see capabilities(7)). A process's user and group IDs can be different inside and outside a user namespace. In particular, a process can have a normal unprivileged user ID outside a user namespace while at the same time having a user ID of 0 inside the namespace; in other words, the process has full privileges for operations inside the user namespace, but is unprivileged for operations outside the namespace. UTS namespaces UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain name. These identifiers are set using sethostname(2) and setdomainname(2), and can be retrieved using uname(2), gethostname(2), and getdomainname(2).","title":"Namespaces"},{"location":"namespaces/#namespaces","text":"A namespace wraps a global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource. Changes to the global resource are visible to other processes that are members of the namespace, but are invisible to other processes. One use of namespaces is to implement containers. Linux provides the following namespaces: Namespace Constant Isolates Cgroup CLONE_NEWCGROUP Cgroup root directory IPC CLONE_NEWIPC System V IPC, POSIX message queues Network CLONE_NEWNET Network devices, stacks, ports, etc. Mount CLONE_NEWNS Mount points PID CLONE_NEWPID Process IDs User CLONE_NEWUSER User and group IDs UTS CLONE_NEWUTS Hostname and NIS domain name","title":"NameSpaces"},{"location":"namespaces/#cgroup-namespace","text":"","title":"cgroup namespace"},{"location":"namespaces/#cgroup","text":"Linux control groups. Control cgroups, usually referred to as cgroups, are a Linux kernel feature which allow processes to be organized into hierarchical groups whose usage of various types of resources can then be limited and monitored. The kernel's cgroup interface is provided through a pseudo-filesystem called cgroupfs. Grouping is implemented in the core cgroup kernel code, while resource tracking and limits are implemented in a set of per-resource-type subsystems (memory, CPU, and so on).","title":"cgroup"},{"location":"namespaces/#ipc-namespaces","text":"IPC namespaces isolate certain IPC resources, namely, System V IPC objects (see svipc(7)) and (since Linux 2.6.30) POSIX message queues (see mq_overview(7)). The common characteristic of these IPC mechanisms is that IPC objects are identified by mechanisms other than filesystem pathnames. Each IPC namespace has its own set of System V IPC identifiers and its own POSIX message queue filesystem. Objects created in an IPC namespace are visible to all other processes that are members of that namespace, but are not visible to processes in other IPC namespaces.","title":"IPC namespaces"},{"location":"namespaces/#network-namespaces","text":"Network namespaces provide isolation of the system resources associated with networking: network devices, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net directory (which is a symbolic link to /proc/PID/net), the /sys/class/net directory, various files under /proc/sys/net, port numbers (sockets), and so on. In addition, network namespaces isolate the UNIX domain abstract socket namespace (see unix(7)). A physical network device can live in exactly one network namespace. When a network namespace is freed (i.e., when the last process in the namespace terminates), its physical network devices are moved back to the initial network namespace (not to the parent of the process). A virtual network (veth(4)) device pair provides a pipe-like abstraction that can be used to create tunnels between network namespaces, and can be used to create a bridge to a physical network device in another namespace. When a namespace is freed, the veth(4) devices that it contains are destroyed. Use of network namespaces requires a kernel that is configured with the CONFIG_NET_NS option.","title":"Network namespaces"},{"location":"namespaces/#mount-namespaces","text":"Mount namespaces provide isolation of the list of mount points seen by the processes in each namespace instance. Thus, the processes in each of the mount namespace instances will see distinct single-directory hierarchies. The views provided by the /proc/[pid]/mounts, /proc/[pid]/mountinfo, and /proc/[pid]/mountstats files (all described in proc(5)) correspond to the mount namespace in which the process with the PID [pid] resides. (All of the processes that reside in the same mount namespace will see the same view in these files.) When a process creates a new mount namespace using clone(2) or unshare(2) with the CLONE_NEWNS flag, the mount point list for the new namespace is a copy of the caller's mount point list. Subsequent modifications to the mount point list (mount(2) and umount(2)) in either mount namespace will not (by default) affect the mount point list seen in the other namespace (but see the following discussion of shared subtrees).","title":"Mount namespaces"},{"location":"namespaces/#pid-namespaces","text":"PID namespaces isolate the process ID number space, meaning that processes in different PID namespaces can have the same PID. PID namespaces allow containers to provide func tionality such as suspending/resuming the set of processes in the container and migrating the container to a new host while the processes inside the container maintain the same PIDs. PIDs in a new PID namespace start at 1, somewhat like a standalone system, and calls to fork(2), vfork(2), or clone(2) will produce processes with PIDs that are unique within the namespace. Use of PID namespaces requires a kernel that is configured with the CONFIG_PID_NS option.","title":"PID namespaces"},{"location":"namespaces/#user-namespaces","text":"User namespaces isolate security-related identifiers and attributes, in particular, user IDs and group IDs (see credentials(7)), the root directory, keys (see keyrings(7)), and capabilities (see capabilities(7)). A process's user and group IDs can be different inside and outside a user namespace. In particular, a process can have a normal unprivileged user ID outside a user namespace while at the same time having a user ID of 0 inside the namespace; in other words, the process has full privileges for operations inside the user namespace, but is unprivileged for operations outside the namespace.","title":"User namespaces"},{"location":"namespaces/#uts-namespaces","text":"UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain name. These identifiers are set using sethostname(2) and setdomainname(2), and can be retrieved using uname(2), gethostname(2), and getdomainname(2).","title":"UTS namespaces"},{"location":"Openstack/Cinder Installation Tutorial for Ubuntu/","text":"Cinder Installation Tutorial for Ubuntu This section describes how to install and configure storage nodes for the Block Storage service. For simplicity, this configuration references one storage node with an empty local block storage device. The instructions use /dev/sdb , but you can substitute a different value for your particular node. The service provisions logical volumes on this device using the LVM driver and provides them to instances via iSCSI transport. You can follow these instructions with minor modifications to horizontally scale your environment with additional storage nodes. Ubuntu Cinder \u5b89\u88c5\u624b\u518c \u8fd9\u4e2a\u7ae0\u8282\u63cf\u8ff0\u5982\u4f55\u5b89\u88c5\u548c\u914d\u7f6e\u5b58\u50a8\u8282\u70b9\u5bf9\u4e8e\u5757\u5b58\u50a8\u670d\u52a1\u3002\u4e3a\u4e86\u7b80\u6613\uff0c\u914d\u7f6e\u53c2\u8003\u4e00\u4e2a\u8282\u70b9\u548c\u7a7a\u7684\u672c\u5730\u5757\u5b58\u50a8\u3002\u8fd9\u4e2a\u8bf4\u660e\u4f7f\u7528 /dev/sdb ,\u4f46\u5728\u5177\u4f53\u7684\u8282\u70b9\u4e0a\u4f60\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u503c\u4ee3\u66ff\u3002 \u670d\u52a1\u5728\u8bbe\u5907\u4e0a\u4f7f\u7528LVM\u9a71\u52a8\u63d0\u4f9b\u903b\u8f91\u5377\u548c\u901a\u8fc7iSCSI\u4f20\u8f93\u63d0\u4f9b\u5b83\u4eec\u7ed9\u5b9e\u4f8b\u3002\u4f60\u53ef\u4ee5\u6309\u7167\u8bf4\u660e\u53ca\u8f83\u5c0f\u7684\u4fee\u6539\uff0c\u5728\u4f60\u7684\u73af\u5883\u589e\u52a0\u5b58\u50a8\u8282\u70b9\u8fdb\u884c\u6c34\u5e73\u6269\u5c55\u3002 simplicity[s\u026am'pl\u026as\u026at\u026a] n.\u7b80\u6613 substitute['s\u028cbst\u026atju\u02d0t] vi. \u66ff\u4ee3 particular adj.\u7279\u522b\u7684 minor adj. \u8f83\u5c0f\u7684","title":"Cinder Installation Tutorial for Ubuntu"},{"location":"Openstack/Cinder Installation Tutorial for Ubuntu/#cinder-installation-tutorial-for-ubuntu","text":"This section describes how to install and configure storage nodes for the Block Storage service. For simplicity, this configuration references one storage node with an empty local block storage device. The instructions use /dev/sdb , but you can substitute a different value for your particular node. The service provisions logical volumes on this device using the LVM driver and provides them to instances via iSCSI transport. You can follow these instructions with minor modifications to horizontally scale your environment with additional storage nodes.","title":"Cinder Installation Tutorial for Ubuntu"},{"location":"Openstack/Cinder Installation Tutorial for Ubuntu/#ubuntu-cinder","text":"\u8fd9\u4e2a\u7ae0\u8282\u63cf\u8ff0\u5982\u4f55\u5b89\u88c5\u548c\u914d\u7f6e\u5b58\u50a8\u8282\u70b9\u5bf9\u4e8e\u5757\u5b58\u50a8\u670d\u52a1\u3002\u4e3a\u4e86\u7b80\u6613\uff0c\u914d\u7f6e\u53c2\u8003\u4e00\u4e2a\u8282\u70b9\u548c\u7a7a\u7684\u672c\u5730\u5757\u5b58\u50a8\u3002\u8fd9\u4e2a\u8bf4\u660e\u4f7f\u7528 /dev/sdb ,\u4f46\u5728\u5177\u4f53\u7684\u8282\u70b9\u4e0a\u4f60\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u503c\u4ee3\u66ff\u3002 \u670d\u52a1\u5728\u8bbe\u5907\u4e0a\u4f7f\u7528LVM\u9a71\u52a8\u63d0\u4f9b\u903b\u8f91\u5377\u548c\u901a\u8fc7iSCSI\u4f20\u8f93\u63d0\u4f9b\u5b83\u4eec\u7ed9\u5b9e\u4f8b\u3002\u4f60\u53ef\u4ee5\u6309\u7167\u8bf4\u660e\u53ca\u8f83\u5c0f\u7684\u4fee\u6539\uff0c\u5728\u4f60\u7684\u73af\u5883\u589e\u52a0\u5b58\u50a8\u8282\u70b9\u8fdb\u884c\u6c34\u5e73\u6269\u5c55\u3002 simplicity[s\u026am'pl\u026as\u026at\u026a] n.\u7b80\u6613 substitute['s\u028cbst\u026atju\u02d0t] vi. \u66ff\u4ee3 particular adj.\u7279\u522b\u7684 minor adj. \u8f83\u5c0f\u7684","title":"Ubuntu Cinder \u5b89\u88c5\u624b\u518c"},{"location":"Openstack/Cinder Installation Tutorial/","text":"Cinder Installation Tutorial The Block Storage service (cinder) provides block storage devices to guest instances. The method in which the storage is provisioned and consumed is determined by the Block Storage driver, or drivers in the case of a multi-backend configuration. There are a variety of drivers that are available: NAS/SAN, NFS, iSCSI, Ceph, and more. The Block Storage API and scheduler services typically run on the controller nodes. Depending upon the drivers used, the volume service can run on controller nodes, compute nodes, or standalone storage nodes. For more information, see the Configuration Reference . Cinder \u5b89\u88c5\u5411\u5bfc \u5757\u5b58\u50a8\u670d\u52a1(cinder)\u63d0\u4f9b\u5757\u5b58\u50a8\u8bbe\u5907\u7ed9\u5ba2\u6237\u673a\u3002\u901a\u8fc7\u54ea\u79cd\u65b9\u5f0f\u63d0\u4f9b\u6216\u4f7f\u7528\u5b58\u50a8\u53d6\u51b3\u4e8e\u5757\u5b58\u50a8\u8bbe\u5907\uff0c\u6216\u8005\u5728\u591a\u540e\u7aef\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\u7531\u9a71\u52a8\u51b3\u5b9a\u3002\u4ee5\u4e0b\u662f\u6709\u6548\u7684\u9a71\u52a8:NAS/SAN,NFS,iSCSI,Ceph,\u6216\u5176\u5b83\u3002 \u5757\u5b58\u50a8API\u548c\u8c03\u5ea6\u670d\u52a1\u901a\u5e38\u8fd0\u884c\u5728\u63a7\u5236\u8282\u70b9\u3002\u4f9d\u8d56\u4f7f\u7528\u7684\u9a71\u52a8\uff0c\u5377\u670d\u52a1\u53ef\u4ee5\u5b89\u88c5\u5728\u63a7\u5236\u8282\u70b9\u3001\u8ba1\u7b97\u8282\u70b9\u3001\u6216\u8005\u5355\u72ec\u7684\u5b58\u50a8\u8282\u70b9\u3002 \u66f4\u591a\u7684\u4fe1\u606f\uff0c\u89c1 \u914d\u7f6e\u53c2\u8003 \u3002 in which:\u5728\u54ea\u70b9\u4e0a consume[k\u0259n'sju\u02d0m] vt. vi. \u6d88\u8017 in the case of \u5728...\u60c5\u51b5\u4e0b typically['t\u026ap\u026ak\u0259l\u026a] adv. \u4ee3\u8868\u6027\u5730\uff1b\u4f5c\u4e3a\u7279\u8272\u5730 depend[d\u026a'pend] vi.\u4f9d\u8d56,\u4f9d\u9760;\u53d6\u51b3\u4e8e;\u76f8\u4fe1\uff0c\u4f9d\u8d56 standalone['st\u00e6nd\u0259,l\u0259\u028an] adj.\u5355\u72ec\u7684","title":"Cinder Installation Tutorial"},{"location":"Openstack/Cinder Installation Tutorial/#cinder-installation-tutorial","text":"The Block Storage service (cinder) provides block storage devices to guest instances. The method in which the storage is provisioned and consumed is determined by the Block Storage driver, or drivers in the case of a multi-backend configuration. There are a variety of drivers that are available: NAS/SAN, NFS, iSCSI, Ceph, and more. The Block Storage API and scheduler services typically run on the controller nodes. Depending upon the drivers used, the volume service can run on controller nodes, compute nodes, or standalone storage nodes. For more information, see the Configuration Reference .","title":"Cinder Installation Tutorial"},{"location":"Openstack/Cinder Installation Tutorial/#cinder","text":"\u5757\u5b58\u50a8\u670d\u52a1(cinder)\u63d0\u4f9b\u5757\u5b58\u50a8\u8bbe\u5907\u7ed9\u5ba2\u6237\u673a\u3002\u901a\u8fc7\u54ea\u79cd\u65b9\u5f0f\u63d0\u4f9b\u6216\u4f7f\u7528\u5b58\u50a8\u53d6\u51b3\u4e8e\u5757\u5b58\u50a8\u8bbe\u5907\uff0c\u6216\u8005\u5728\u591a\u540e\u7aef\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\u7531\u9a71\u52a8\u51b3\u5b9a\u3002\u4ee5\u4e0b\u662f\u6709\u6548\u7684\u9a71\u52a8:NAS/SAN,NFS,iSCSI,Ceph,\u6216\u5176\u5b83\u3002 \u5757\u5b58\u50a8API\u548c\u8c03\u5ea6\u670d\u52a1\u901a\u5e38\u8fd0\u884c\u5728\u63a7\u5236\u8282\u70b9\u3002\u4f9d\u8d56\u4f7f\u7528\u7684\u9a71\u52a8\uff0c\u5377\u670d\u52a1\u53ef\u4ee5\u5b89\u88c5\u5728\u63a7\u5236\u8282\u70b9\u3001\u8ba1\u7b97\u8282\u70b9\u3001\u6216\u8005\u5355\u72ec\u7684\u5b58\u50a8\u8282\u70b9\u3002 \u66f4\u591a\u7684\u4fe1\u606f\uff0c\u89c1 \u914d\u7f6e\u53c2\u8003 \u3002 in which:\u5728\u54ea\u70b9\u4e0a consume[k\u0259n'sju\u02d0m] vt. vi. \u6d88\u8017 in the case of \u5728...\u60c5\u51b5\u4e0b typically['t\u026ap\u026ak\u0259l\u026a] adv. \u4ee3\u8868\u6027\u5730\uff1b\u4f5c\u4e3a\u7279\u8272\u5730 depend[d\u026a'pend] vi.\u4f9d\u8d56,\u4f9d\u9760;\u53d6\u51b3\u4e8e;\u76f8\u4fe1\uff0c\u4f9d\u8d56 standalone['st\u00e6nd\u0259,l\u0259\u028an] adj.\u5355\u72ec\u7684","title":"Cinder \u5b89\u88c5\u5411\u5bfc"},{"location":"Openstack/Components/","text":"Components Object Storage uses the following components to deliver high availability, high durability, and high concurrency: Proxy servers - Handle all of the incoming API requests. Rings - Map logical names of data to locations on particular disks. Zones - Isolate data from other zones. A failure in one zone does not impact the rest of the cluster as data replicates across zones. Accounts and containers - Each account and container are individual databases that are distributed across the cluster. An account database contains the list of containers in that account. A container database contains the list of objects in that container. Objects - The data itself. Partitions - A partition stores objects, account databases, and container databases and helps manage locations where data lives in the cluster. Object Storage building blocks Proxy servers \u00b6 Proxy servers are the public face of Object Storage and handle all of the incoming API requests. Once a proxy server receives a request, it determines the storage node based on the object\u2019s URL, for example: https://swift.example.com/v1/account/container/object . Proxy servers also coordinate responses, handle failures, and coordinate timestamps. Proxy servers use a shared-nothing architecture and can be scaled as needed based on projected workloads. A minimum of two proxy servers should be deployed behind a separately-managed load balancer. If one proxy server fails, the others take over. Rings \u00b6 A ring represents a mapping between the names of entities stored in the cluster and their physical locations on disks. There are separate rings for accounts, containers, and objects. When components of the system need to perform an operation on an object, container, or account, they need to interact with the corresponding ring to determine the appropriate location in the cluster. The ring maintains this mapping using zones, devices, partitions, and replicas. Each partition in the ring is replicated, by default, three times across the cluster, and partition locations are stored in the mapping maintained by the ring. The ring is also responsible for determining which devices are used as handoffs in failure scenarios. Data can be isolated into zones in the ring. Each partition replica will try to reside in a different zone. A zone could represent a drive, a server, a cabinet, a switch, or even a data center. The partitions of the ring are distributed among all of the devices in the Object Storage installation. When partitions need to be moved around (for example, if a device is added to the cluster), the ring ensures that a minimum number of partitions are moved at a time, and only one replica of a partition is moved at a time. You can use weights to balance the distribution of partitions on drives across the cluster. This can be useful, for example, when differently sized drives are used in a cluster. The ring is used by the proxy server and several background processes (like replication). The ring These rings are externally managed. The server processes themselves do not modify the rings, they are instead given new rings modified by other tools. The ring uses a configurable number of bits from an MD5 hash for a path as a partition index that designates a device. The number of bits kept from the hash is known as the partition power, and 2 to the partition power indicates the partition count. Partitioning the full MD5 hash ring allows other parts of the cluster to work in batches of items at once which ends up either more efficient or at least less complex than working with each item separately or the entire cluster all at once. Another configurable value is the replica count, which indicates how many of the partition-device assignments make up a single ring. For a given partition index, each replica\u2019s device will not be in the same zone as any other replica\u2019s device. Zones can be used to group devices based on physical locations, power separations, network separations, or any other attribute that would improve the availability of multiple replicas at the same time. Zones \u00b6 Object Storage allows configuring zones in order to isolate failure boundaries. If possible, each data replica resides in a separate zone. At the smallest level, a zone could be a single drive or a grouping of a few drives. If there were five object storage servers, then each server would represent its own zone. Larger deployments would have an entire rack (or multiple racks) of object servers, each representing a zone. The goal of zones is to allow the cluster to tolerate significant outages of storage servers without losing all replicas of the data. Zones Accounts and containers \u00b6 Each account and container is an individual SQLite database that is distributed across the cluster. An account database contains the list of containers in that account. A container database contains the list of objects in that container. Accounts and containers To keep track of object data locations, each account in the system has a database that references all of its containers, and each container database references each object. Partitions \u00b6 A partition is a collection of stored data. This includes account databases, container databases, and objects. Partitions are core to the replication system. Think of a partition as a bin moving throughout a fulfillment center warehouse. Individual orders get thrown into the bin. The system treats that bin as a cohesive entity as it moves throughout the system. A bin is easier to deal with than many little things. It makes for fewer moving parts throughout the system. System replicators and object uploads/downloads operate on partitions. As the system scales up, its behavior continues to be predictable because the number of partitions is a fixed number. Implementing a partition is conceptually simple: a partition is just a directory sitting on a disk with a corresponding hash table of what it contains. Partitions Replicators \u00b6 In order to ensure that there are three copies of the data everywhere, replicators continuously examine each partition. For each local partition, the replicator compares it against the replicated copies in the other zones to see if there are any differences. The replicator knows if replication needs to take place by examining hashes. A hash file is created for each partition, which contains hashes of each directory in the partition. For a given partition, the hash files for each of the partition\u2019s copies are compared. If the hashes are different, then it is time to replicate, and the directory that needs to be replicated is copied over. This is where partitions come in handy. With fewer things in the system, larger chunks of data are transferred around (rather than lots of little TCP connections, which is inefficient) and there is a consistent number of hashes to compare. The cluster has an eventually-consistent behavior where old data may be served from partitions that missed updates, but replication will cause all partitions to converge toward the newest data. Replication If a zone goes down, one of the nodes containing a replica notices and proactively copies data to a handoff location. Use cases \u00b6 The following sections show use cases for object uploads and downloads and introduce the components. Upload \u00b6 A client uses the REST API to make a HTTP request to PUT an object into an existing container. The cluster receives the request. First, the system must figure out where the data is going to go. To do this, the account name, container name, and object name are all used to determine the partition where this object should live. Then a lookup in the ring figures out which storage nodes contain the partitions in question. The data is then sent to each storage node where it is placed in the appropriate partition. At least two of the three writes must be successful before the client is notified that the upload was successful. Next, the container database is updated asynchronously to reflect that there is a new object in it. Object Storage in use Download \u00b6 A request comes in for an account/container/object. Using the same consistent hashing, the partition index is determined. A lookup in the ring reveals which storage nodes contain that partition. A request is made to one of the storage nodes to fetch the object and, if that fails, requests are made to the other nodes.","title":"Components"},{"location":"Openstack/Components/#components","text":"Object Storage uses the following components to deliver high availability, high durability, and high concurrency: Proxy servers - Handle all of the incoming API requests. Rings - Map logical names of data to locations on particular disks. Zones - Isolate data from other zones. A failure in one zone does not impact the rest of the cluster as data replicates across zones. Accounts and containers - Each account and container are individual databases that are distributed across the cluster. An account database contains the list of containers in that account. A container database contains the list of objects in that container. Objects - The data itself. Partitions - A partition stores objects, account databases, and container databases and helps manage locations where data lives in the cluster. Object Storage building blocks","title":"Components"},{"location":"Openstack/Components/#proxy-servers","text":"Proxy servers are the public face of Object Storage and handle all of the incoming API requests. Once a proxy server receives a request, it determines the storage node based on the object\u2019s URL, for example: https://swift.example.com/v1/account/container/object . Proxy servers also coordinate responses, handle failures, and coordinate timestamps. Proxy servers use a shared-nothing architecture and can be scaled as needed based on projected workloads. A minimum of two proxy servers should be deployed behind a separately-managed load balancer. If one proxy server fails, the others take over.","title":"Proxy servers\u00b6"},{"location":"Openstack/Components/#rings","text":"A ring represents a mapping between the names of entities stored in the cluster and their physical locations on disks. There are separate rings for accounts, containers, and objects. When components of the system need to perform an operation on an object, container, or account, they need to interact with the corresponding ring to determine the appropriate location in the cluster. The ring maintains this mapping using zones, devices, partitions, and replicas. Each partition in the ring is replicated, by default, three times across the cluster, and partition locations are stored in the mapping maintained by the ring. The ring is also responsible for determining which devices are used as handoffs in failure scenarios. Data can be isolated into zones in the ring. Each partition replica will try to reside in a different zone. A zone could represent a drive, a server, a cabinet, a switch, or even a data center. The partitions of the ring are distributed among all of the devices in the Object Storage installation. When partitions need to be moved around (for example, if a device is added to the cluster), the ring ensures that a minimum number of partitions are moved at a time, and only one replica of a partition is moved at a time. You can use weights to balance the distribution of partitions on drives across the cluster. This can be useful, for example, when differently sized drives are used in a cluster. The ring is used by the proxy server and several background processes (like replication). The ring These rings are externally managed. The server processes themselves do not modify the rings, they are instead given new rings modified by other tools. The ring uses a configurable number of bits from an MD5 hash for a path as a partition index that designates a device. The number of bits kept from the hash is known as the partition power, and 2 to the partition power indicates the partition count. Partitioning the full MD5 hash ring allows other parts of the cluster to work in batches of items at once which ends up either more efficient or at least less complex than working with each item separately or the entire cluster all at once. Another configurable value is the replica count, which indicates how many of the partition-device assignments make up a single ring. For a given partition index, each replica\u2019s device will not be in the same zone as any other replica\u2019s device. Zones can be used to group devices based on physical locations, power separations, network separations, or any other attribute that would improve the availability of multiple replicas at the same time.","title":"Rings\u00b6"},{"location":"Openstack/Components/#zones","text":"Object Storage allows configuring zones in order to isolate failure boundaries. If possible, each data replica resides in a separate zone. At the smallest level, a zone could be a single drive or a grouping of a few drives. If there were five object storage servers, then each server would represent its own zone. Larger deployments would have an entire rack (or multiple racks) of object servers, each representing a zone. The goal of zones is to allow the cluster to tolerate significant outages of storage servers without losing all replicas of the data. Zones","title":"Zones\u00b6"},{"location":"Openstack/Components/#accounts-and-containers","text":"Each account and container is an individual SQLite database that is distributed across the cluster. An account database contains the list of containers in that account. A container database contains the list of objects in that container. Accounts and containers To keep track of object data locations, each account in the system has a database that references all of its containers, and each container database references each object.","title":"Accounts and containers\u00b6"},{"location":"Openstack/Components/#partitions","text":"A partition is a collection of stored data. This includes account databases, container databases, and objects. Partitions are core to the replication system. Think of a partition as a bin moving throughout a fulfillment center warehouse. Individual orders get thrown into the bin. The system treats that bin as a cohesive entity as it moves throughout the system. A bin is easier to deal with than many little things. It makes for fewer moving parts throughout the system. System replicators and object uploads/downloads operate on partitions. As the system scales up, its behavior continues to be predictable because the number of partitions is a fixed number. Implementing a partition is conceptually simple: a partition is just a directory sitting on a disk with a corresponding hash table of what it contains. Partitions","title":"Partitions\u00b6"},{"location":"Openstack/Components/#replicators","text":"In order to ensure that there are three copies of the data everywhere, replicators continuously examine each partition. For each local partition, the replicator compares it against the replicated copies in the other zones to see if there are any differences. The replicator knows if replication needs to take place by examining hashes. A hash file is created for each partition, which contains hashes of each directory in the partition. For a given partition, the hash files for each of the partition\u2019s copies are compared. If the hashes are different, then it is time to replicate, and the directory that needs to be replicated is copied over. This is where partitions come in handy. With fewer things in the system, larger chunks of data are transferred around (rather than lots of little TCP connections, which is inefficient) and there is a consistent number of hashes to compare. The cluster has an eventually-consistent behavior where old data may be served from partitions that missed updates, but replication will cause all partitions to converge toward the newest data. Replication If a zone goes down, one of the nodes containing a replica notices and proactively copies data to a handoff location.","title":"Replicators\u00b6"},{"location":"Openstack/Components/#use-cases","text":"The following sections show use cases for object uploads and downloads and introduce the components.","title":"Use cases\u00b6"},{"location":"Openstack/Components/#upload","text":"A client uses the REST API to make a HTTP request to PUT an object into an existing container. The cluster receives the request. First, the system must figure out where the data is going to go. To do this, the account name, container name, and object name are all used to determine the partition where this object should live. Then a lookup in the ring figures out which storage nodes contain the partitions in question. The data is then sent to each storage node where it is placed in the appropriate partition. At least two of the three writes must be successful before the client is notified that the upload was successful. Next, the container database is updated asynchronously to reflect that there is a new object in it. Object Storage in use","title":"Upload\u00b6"},{"location":"Openstack/Components/#download","text":"A request comes in for an account/container/object. Using the same consistent hashing, the partition index is determined. A lookup in the ring reveals which storage nodes contain that partition. A request is made to one of the storage nodes to fetch the object and, if that fails, requests are made to the other nodes.","title":"Download\u00b6"},{"location":"Openstack/Identity service overview/","text":"Identity service overview The OpenStack Identity service provides a single point of integration for managing authentication, authorization, and a catalog of services. The Identity service is typically the first service a user interacts with. Once authenticated, an end user can use their identity to access other OpenStack services. Likewise, other OpenStack services leverage the Identity service to ensure users are who they say they are and discover where other services are within the deployment. The Identity service can also integrate with some external user management systems (such as LDAP). Users and services can locate other services by using the service catalog, which is managed by the Identity service. As the name implies, a service catalog is a collection of available services in an OpenStack deployment. Each service can have one or many endpoints and each endpoint can be one of three types: admin, internal, or public. In a production environment, different endpoint types might reside on separate networks exposed to different types of users for security reasons. For instance, the public API network might be visible from the Internet so customers can manage their clouds. The admin API network might be restricted to operators within the organization that manages cloud infrastructure. The internal API network might be restricted to the hosts that contain OpenStack services. Also, OpenStack supports multiple regions for scalability. For simplicity, this guide uses the management network for all endpoint types and the default RegionOne region. Together, regions, services, and endpoints created within the Identity service comprise the service catalog for a deployment. Each OpenStack service in your deployment needs a service entry with corresponding endpoints stored in the Identity service. This can all be done after the Identity service has been installed and configured. The Identity service contains these components: Server A centralized server provides authentication and authorization services using a RESTful interface. Drivers Drivers or a service back end are integrated to the centralized server. They are used for accessing identity information in repositories external to OpenStack, and may already exist in the infrastructure where OpenStack is deployed (for example, SQL databases or LDAP servers). Modules Middleware modules run in the address space of the OpenStack component that is using the Identity service. These modules intercept service requests, extract user credentials, and send them to the centralized server for authorization. The integration between the middleware modules and OpenStack components uses the Python Web Server Gateway Interface. \u8eab\u4efd\u670d\u52a1\u6982\u89c8 Opentsack\u7684\u8eab\u4efd\u670d\u52a1\u63d0\u4f9b\u5355\u70b9\u96c6\u6210\u4e86\u7ba1\u7406\u8ba4\u8bc1\u3001\u9274\u6743\u548c\u670d\u52a1\u76ee\u5f55\u3002","title":"Identity service overview"},{"location":"Openstack/Identity service overview/#identity-service-overview","text":"The OpenStack Identity service provides a single point of integration for managing authentication, authorization, and a catalog of services. The Identity service is typically the first service a user interacts with. Once authenticated, an end user can use their identity to access other OpenStack services. Likewise, other OpenStack services leverage the Identity service to ensure users are who they say they are and discover where other services are within the deployment. The Identity service can also integrate with some external user management systems (such as LDAP). Users and services can locate other services by using the service catalog, which is managed by the Identity service. As the name implies, a service catalog is a collection of available services in an OpenStack deployment. Each service can have one or many endpoints and each endpoint can be one of three types: admin, internal, or public. In a production environment, different endpoint types might reside on separate networks exposed to different types of users for security reasons. For instance, the public API network might be visible from the Internet so customers can manage their clouds. The admin API network might be restricted to operators within the organization that manages cloud infrastructure. The internal API network might be restricted to the hosts that contain OpenStack services. Also, OpenStack supports multiple regions for scalability. For simplicity, this guide uses the management network for all endpoint types and the default RegionOne region. Together, regions, services, and endpoints created within the Identity service comprise the service catalog for a deployment. Each OpenStack service in your deployment needs a service entry with corresponding endpoints stored in the Identity service. This can all be done after the Identity service has been installed and configured. The Identity service contains these components: Server A centralized server provides authentication and authorization services using a RESTful interface. Drivers Drivers or a service back end are integrated to the centralized server. They are used for accessing identity information in repositories external to OpenStack, and may already exist in the infrastructure where OpenStack is deployed (for example, SQL databases or LDAP servers). Modules Middleware modules run in the address space of the OpenStack component that is using the Identity service. These modules intercept service requests, extract user credentials, and send them to the centralized server for authorization. The integration between the middleware modules and OpenStack components uses the Python Web Server Gateway Interface.","title":"Identity service overview"},{"location":"Openstack/Identity service overview/#_1","text":"Opentsack\u7684\u8eab\u4efd\u670d\u52a1\u63d0\u4f9b\u5355\u70b9\u96c6\u6210\u4e86\u7ba1\u7406\u8ba4\u8bc1\u3001\u9274\u6743\u548c\u670d\u52a1\u76ee\u5f55\u3002","title":"\u8eab\u4efd\u670d\u52a1\u6982\u89c8"},{"location":"Openstack/Introduction to Object Storage/","text":"Introduction to Object Storage OpenStack Object Storage (swift) is used for redundant, scalable data storage using clusters of standardized servers to store petabytes of accessible data. It is a long-term storage system for large amounts of static data which can be retrieved and updated. Object Storage uses a distributed architecture with no central point of control, providing greater scalability, redundancy, and permanence. Objects are written to multiple hardware devices, with the OpenStack software responsible for ensuring data replication and integrity across the cluster. Storage clusters scale horizontally by adding new nodes. Should a node fail, OpenStack works to replicate its content from other active nodes. Because OpenStack uses software logic to ensure data replication and distribution across different devices, inexpensive commodity hard drives and servers can be used in lieu of more expensive equipment. Object Storage is ideal for cost effective, scale-out storage. It provides a fully distributed, API-accessible storage platform that can be integrated directly into applications or used for backup, archiving, and data retention. \u5bf9\u8c61\u5b58\u50a8\u4ecb\u7ecd Openstack\u5bf9\u8c61\u5b58\u50a8(swift)\u88ab\u5b9e\u73b0\u6210\u5197\u4f59\u3001\u53ef\u4f38\u7f29\u7684\u6570\u636e\u5b58\u50a8\uff0c\u4f7f\u7528\u6807\u51c6\u7684\u670d\u52a1\u5668\u96c6\u7fa4\u7528\u4e8e\u5b58\u653ePB\u7ea7\u7684\u53ef\u8bbf\u95ee\u6570\u636e\u3002\u8fd9\u662f\u4e00\u4e2a\u957f\u671f\u7684\u5b58\u50a8\u7cfb\u7edf\uff0c\u7528\u4e8e\u5927\u91cf\u7684\u9759\u6001\u6570\u636e\u80fd\u591f\u88ab\u6062\u590d\u548c\u66f4\u65b0\u3002\u5bf9\u8c61\u5b58\u50a8\u4f7f\u7528\u6ca1\u6709\u63a7\u5236\u4e2d\u5fc3\u7684\u5206\u5e03\u5f0f\u67b6\u6784\uff0c\u63d0\u4f9b\u8f83\u5927\u7684\u6269\u5c55\u6027\u3001\u5197\u4f59\u6027\u548c\u6301\u4e45\u5316\u3002\u5bf9\u8c61\u88ab\u5199\u5230\u591a\u4e2a\u786c\u4ef6\u8bbe\u5907\uff0cOpenstack\u8f6f\u4ef6\u8d1f\u8d23\u786e\u4fdd\u6570\u636e\u590d\u5236\u53ca\u5b8c\u6574\u8bbf\u95ee\u96c6\u7fa4\u3002\u5b58\u50a8\u96c6\u7fa4\u652f\u6301\u6c34\u5e73\u6269\u5c55\u901a\u8fc7\u6dfb\u52a0\u65b0\u7684\u8282\u70b9\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5931\u8d25\uff0cOpenstack\u5c06\u4f1a\u4ece\u5176\u5b83\u6d3b\u52a8\u7684\u8282\u70b9\u590d\u5236\u5b83\u7684\u5185\u5bb9\u3002\u56e0\u4e3aOpenstack\u4f7f\u7528\u8f6f\u4ef6\u903b\u8f91\u786e\u4fdd\u6570\u636e\u590d\u5236\u548c\u5206\u5e03\u5f0f\u8bbf\u95ee\u4e0d\u540c\u7684\u8bbe\u5907\uff0c\u4fbf\u5b9c\u7684\u5546\u54c1\u786c\u4ef6\u9a71\u52a8\u548c\u670d\u52a1\u5668\u80fd\u88ab\u7528\u4e8e\u4ee3\u66ff\u66f4\u6602\u8d35\u7684\u8bbe\u5907\u3002 \u5bf9\u8c61\u5b58\u50a8\u662f\u7406\u60f3\u7684\u5177\u5907\u6210\u672c\u6548\u76ca\u3001\u6a2a\u5411\u6269\u5c55\u7684\u5b58\u50a8\u3002\u5b83\u63d0\u4f9b\u4e00\u4e2a\u5b8c\u5168\u5206\u5e03\u5f0f\u7684\u3001API\u8bbf\u95ee\u5b58\u50a8\u5e73\u53f0\uff0c\u80fd\u591f\u76f4\u63a5\u96c6\u6210\u5165\u5e94\u7528\u6216\u7528\u4e8e\u5907\u4efd\u3001\u5f52\u6863\u548c\u6570\u636e\u4fdd\u7559\u3002 redundant [r\u026a'd\u028cnd(\u0259)nt] adj.\u591a\u4f59\u7684\uff0c\u8fc7\u5269\u7684 scalable ['ske\u026al\u0259b(\u0259)l] adj. \u53ef\u4f38\u7f29\u7684 standardized ['st\u00e6nd\u0259,daizd] adj. \u6807\u51c6\u7684 long term \u957f\u671f\u7684 retrieved [ri'tri:vd] v. \u6062\u590d architecture ['\u0251\u02d0k\u026atekt\u0283\u0259] n.\u67b6\u6784 permanence ['p\u025c\u02d0m\u0259n\u0259ns] n. \u6301\u4e45;\u6c38\u4e45 multiple ['m\u028clt\u026apl] adj.\u591a\u6837\u7684 responsible [r\u026a'sp\u0252ns\u026ab(\u0259)l] adj.\u8d1f\u8d23\u7684 integrity [\u026an'tegr\u026at\u026a] n. \u5b8c\u6574 commodity [k\u0259'm\u0252d\u026at\u026a] n.\u5546\u54c1 drive [dra\u026av] n.\u9a71\u52a8 lieu [lju\u02d0; lu\u02d0]n. \u4ee3\u66ff equipment [\u026a'kw\u026apm(\u0259)nt] n.\u8bbe\u5907 ideal [a\u026a'd\u026a\u0259l; a\u026a'di\u02d0\u0259l] adj.\u7406\u60f3\u7684 effective [\u026a'fekt\u026av] adj.\u6709\u6548\u7684 cost effective \u6709\u6210\u672c\u6548\u76ca\u7684\uff1b\u5212\u7b97\u7684 fully ['f\u028al\u026a] adv.\u5145\u5206\u5730 retention [r\u026a'ten\u0283(\u0259)n] n.\u4fdd\u7559","title":"Introduction to Object Storage"},{"location":"Openstack/Introduction to Object Storage/#introduction-to-object-storage","text":"OpenStack Object Storage (swift) is used for redundant, scalable data storage using clusters of standardized servers to store petabytes of accessible data. It is a long-term storage system for large amounts of static data which can be retrieved and updated. Object Storage uses a distributed architecture with no central point of control, providing greater scalability, redundancy, and permanence. Objects are written to multiple hardware devices, with the OpenStack software responsible for ensuring data replication and integrity across the cluster. Storage clusters scale horizontally by adding new nodes. Should a node fail, OpenStack works to replicate its content from other active nodes. Because OpenStack uses software logic to ensure data replication and distribution across different devices, inexpensive commodity hard drives and servers can be used in lieu of more expensive equipment. Object Storage is ideal for cost effective, scale-out storage. It provides a fully distributed, API-accessible storage platform that can be integrated directly into applications or used for backup, archiving, and data retention.","title":"Introduction to Object Storage"},{"location":"Openstack/Introduction to Object Storage/#_1","text":"Openstack\u5bf9\u8c61\u5b58\u50a8(swift)\u88ab\u5b9e\u73b0\u6210\u5197\u4f59\u3001\u53ef\u4f38\u7f29\u7684\u6570\u636e\u5b58\u50a8\uff0c\u4f7f\u7528\u6807\u51c6\u7684\u670d\u52a1\u5668\u96c6\u7fa4\u7528\u4e8e\u5b58\u653ePB\u7ea7\u7684\u53ef\u8bbf\u95ee\u6570\u636e\u3002\u8fd9\u662f\u4e00\u4e2a\u957f\u671f\u7684\u5b58\u50a8\u7cfb\u7edf\uff0c\u7528\u4e8e\u5927\u91cf\u7684\u9759\u6001\u6570\u636e\u80fd\u591f\u88ab\u6062\u590d\u548c\u66f4\u65b0\u3002\u5bf9\u8c61\u5b58\u50a8\u4f7f\u7528\u6ca1\u6709\u63a7\u5236\u4e2d\u5fc3\u7684\u5206\u5e03\u5f0f\u67b6\u6784\uff0c\u63d0\u4f9b\u8f83\u5927\u7684\u6269\u5c55\u6027\u3001\u5197\u4f59\u6027\u548c\u6301\u4e45\u5316\u3002\u5bf9\u8c61\u88ab\u5199\u5230\u591a\u4e2a\u786c\u4ef6\u8bbe\u5907\uff0cOpenstack\u8f6f\u4ef6\u8d1f\u8d23\u786e\u4fdd\u6570\u636e\u590d\u5236\u53ca\u5b8c\u6574\u8bbf\u95ee\u96c6\u7fa4\u3002\u5b58\u50a8\u96c6\u7fa4\u652f\u6301\u6c34\u5e73\u6269\u5c55\u901a\u8fc7\u6dfb\u52a0\u65b0\u7684\u8282\u70b9\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u5931\u8d25\uff0cOpenstack\u5c06\u4f1a\u4ece\u5176\u5b83\u6d3b\u52a8\u7684\u8282\u70b9\u590d\u5236\u5b83\u7684\u5185\u5bb9\u3002\u56e0\u4e3aOpenstack\u4f7f\u7528\u8f6f\u4ef6\u903b\u8f91\u786e\u4fdd\u6570\u636e\u590d\u5236\u548c\u5206\u5e03\u5f0f\u8bbf\u95ee\u4e0d\u540c\u7684\u8bbe\u5907\uff0c\u4fbf\u5b9c\u7684\u5546\u54c1\u786c\u4ef6\u9a71\u52a8\u548c\u670d\u52a1\u5668\u80fd\u88ab\u7528\u4e8e\u4ee3\u66ff\u66f4\u6602\u8d35\u7684\u8bbe\u5907\u3002 \u5bf9\u8c61\u5b58\u50a8\u662f\u7406\u60f3\u7684\u5177\u5907\u6210\u672c\u6548\u76ca\u3001\u6a2a\u5411\u6269\u5c55\u7684\u5b58\u50a8\u3002\u5b83\u63d0\u4f9b\u4e00\u4e2a\u5b8c\u5168\u5206\u5e03\u5f0f\u7684\u3001API\u8bbf\u95ee\u5b58\u50a8\u5e73\u53f0\uff0c\u80fd\u591f\u76f4\u63a5\u96c6\u6210\u5165\u5e94\u7528\u6216\u7528\u4e8e\u5907\u4efd\u3001\u5f52\u6863\u548c\u6570\u636e\u4fdd\u7559\u3002 redundant [r\u026a'd\u028cnd(\u0259)nt] adj.\u591a\u4f59\u7684\uff0c\u8fc7\u5269\u7684 scalable ['ske\u026al\u0259b(\u0259)l] adj. \u53ef\u4f38\u7f29\u7684 standardized ['st\u00e6nd\u0259,daizd] adj. \u6807\u51c6\u7684 long term \u957f\u671f\u7684 retrieved [ri'tri:vd] v. \u6062\u590d architecture ['\u0251\u02d0k\u026atekt\u0283\u0259] n.\u67b6\u6784 permanence ['p\u025c\u02d0m\u0259n\u0259ns] n. \u6301\u4e45;\u6c38\u4e45 multiple ['m\u028clt\u026apl] adj.\u591a\u6837\u7684 responsible [r\u026a'sp\u0252ns\u026ab(\u0259)l] adj.\u8d1f\u8d23\u7684 integrity [\u026an'tegr\u026at\u026a] n. \u5b8c\u6574 commodity [k\u0259'm\u0252d\u026at\u026a] n.\u5546\u54c1 drive [dra\u026av] n.\u9a71\u52a8 lieu [lju\u02d0; lu\u02d0]n. \u4ee3\u66ff equipment [\u026a'kw\u026apm(\u0259)nt] n.\u8bbe\u5907 ideal [a\u026a'd\u026a\u0259l; a\u026a'di\u02d0\u0259l] adj.\u7406\u60f3\u7684 effective [\u026a'fekt\u026av] adj.\u6709\u6548\u7684 cost effective \u6709\u6210\u672c\u6548\u76ca\u7684\uff1b\u5212\u7b97\u7684 fully ['f\u028al\u026a] adv.\u5145\u5206\u5730 retention [r\u026a'ten\u0283(\u0259)n] n.\u4fdd\u7559","title":"\u5bf9\u8c61\u5b58\u50a8\u4ecb\u7ecd"},{"location":"Openstack/Keystone_Token/","text":"Keystone_Token \u5173\u952e\u70b9 \u4f5c\u4e3a\u4f7f\u7528API Endpoint\u7684Client \uff0c\u5176\u6570\u91cf\u3001\u7c7b\u578b\u90fd\u662f\u590d\u6742\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u5bf9 Client\u7684\u8eab\u4efd\u8fdb\u884c\u9a8c\u8bc1 \u660e\u6587\u4f20\u8f93\u5bc6\u7801\u4e0d\u5b8c\u5168 Token \u4f5c\u4e3a\u4e34\u65f6\u51ed\u8bc1\uff0c\u53ef\u4ee5\u589e\u52a0\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\u7684\u5b89\u5168\u6027 \u9700\u8981\u9a8c\u8bc1 Token \u7684\u5408\u6cd5\u6027 API \u9700\u8981\u4ec0\u4e48\u4e1c\u897f role Project expire date Client \u9700\u8981\u4ec0\u4e48\u4e1c\u897f Project Catalog \u56db\u79cd\u7c7b\u578b UUID tokens Fernet tokens PKI tokens PKIZ tokens UUID tokens \u57fa\u4e8e Client \u63d0\u4f9b\u7684\u7528\u6237\u540d/\u5bc6\u7801\u662f\u6b63\u786e\u7684\uff1a keystone: \u751f\u6210 UUID token \u5c06 UUID token \u5b58\u50a8\u5728\u5176\u540e\u7aef \u5c06 UUID token \u7684\u526f\u672c\u53d1\u9001\u56de\u5ba2\u6237\u7aef \u5ba2\u6237\u7aef\u5c06\u7f13\u5b58 token \u7136\u540e\uff0cUUID token \u5c06\u968f\u5ba2\u6237\u7aef\u7684\u6bcf\u4e2a API \u8c03\u7528\u4e00\u8d77\u4f20\u9012 \u5728\u6536\u5230\u6bcf\u6b21\u7528\u6237\u7684\u8bf7\u6c42\u540e\uff0cAPI Endpoint \u4f1a\u5c06\u6b64 UUID token \u53d1\u9001\u5230 keystone \u8fdb\u884c\u9a8c\u8bc1 keystone \u5c06\u6536\u5230\u7684 UUID Token \u4e0e\u5b58\u653e\u5728\u540e\u7aef\u7684\u5339\u914d(\u68c0\u67e5 UUID \u5b57\u7b26\u4e32\uff0c\u5230\u671f\u65e5\u671f) keystone \u5c06\u5411 API \u7aef\u70b9\u8fd4\u56de\u201c\u6210\u529f\u201d\u6216\u201c\u5931\u8d25\u201d\u6d88\u606f PKI Token \u6bcf\u4e2aAPI Endpoint \u90fd\u4f1a\u4fdd\u7559 keystone \u7684\u526f\u672c\uff1a Signing certificate Revocation list CA certificate \u751f\u6210CMS Token \uff0c\u4f7f\u7528\u5982\u4e0b\u6570\u636e\uff1a Service catalog User roles Metadata \u751f\u6210\u4ee3\u7801\uff1a def _get_token_id(self, token_data): try: token_json = jsonutils.dumps(token_data, cls=utils.PKIEncoder) token_id = str(cms.cms_sign_token(token_json, CONF.signing.certfile, CONF.signing.keyfile)) return token_id \u5185\u5bb9\u5982\u4e0b\uff1a { \"token\": { \"methods\": [ \"password\" ], \"roles\": [{\"id\": \"5642056d336b4c2a894882425ce22a86\", \"name\": \"admin\"}], \"expires_at\": \"2015-12-25T09:57:28.404275Z\", \"project\": { \"domain\": { \"id\": \"default\", \"name\": \"Default\"}, \"id\": \"144d8a99a42447379ac37f78bf0ef608\", \"name\": \"admin\"}, \"catalog\": [ { \"endpoints\": [ { \"region_id\": \"RegionOne\", \"url\": \"http://controller:5000/v2.0\", \"region\": \"RegionOne\", \"interface\": \"public\", \"id\": \"3837de623efd4af799e050d4d8d1f307\" }, ...... ]}], \"extras\": {}, \"user\": { \"domain\": {\"id\": \"default\", \"name\": \"Default\"}, \"id\": \"1552d60a042e4a2caa07ea7ae6aa2f09\", \"name\": \"admin\"}, \"audit_ids\": [\"ZCvZW2TtTgiaAsVA8qmc3A\"], \"issued_at\": \"2015-12-25T08:57:28.404304Z\" } } token_data \u7ecf cms.cms_sign_token \u7b7e\u540d\u751f\u6210\u7684 token_id \u5982\u4e0b\uff0c\u5171 1932 Byte\uff1a MIIKoZIhvcNAQcCoIIFljCCBZICAQExDTALBglghkgBZQMEAgEwggPzBgkqhkiG9w0B ...... rhr0acV3bMKzmqvViHf-fPVnLDMJajOWSuhimqfLZHRdr+ck0WVQosB6+M6iAvrEF7v \u6ce8\u610f\u4e8b\u9879\uff1a \u4e0e\u6570\u5b57\u8bc1\u4e66\u7684\u7b7e\u540d\u65b9\u5f0f\u5b58\u5728\u5dee\u5f02\uff0c\u76f4\u63a5\u5c06token_data\u7ecf\u8fc7CMS\u52a0\u5bc6\u6210token\u3002API Endpoint\u6536\u5230Client\u53d1\u9001\u7684token\u540e\uff0c\u76f4\u63a5\u4f7f\u7528CA Certificate\u5185\u7684\u516c\u94a5\u89e3\u5bc6\u3002 Token\u9a8c\u8bc1\u548c\u5230\u671f PKI Token\u4f7fOpenstack API Endpoint\u80fd\u591f\u901a\u8fc7\u68c0\u67e5Keystone\u7684\u7b7e\u540d\u8fdb\u884c\u4ee4\u724c\u6709\u6548\u6027\u548c\u79bb\u7ebf\u9a8c\u8bc1 \u4ee5\u4e0b\u4e09\u6837\u4e1c\u897f\u90fd\u5e94\u8be5\u88ab\u9a8c\u8bc1\uff1a Token \u7684\u7b7e\u540d Token \u7684\u6709\u6548\u671f Token \u662f\u5426\u88ab\u5220\u9664\uff08\u64a4\u9500\uff09 \u88ab\u5220\u9664\u7684token\u88ab\u5f3a\u5236\u653e\u5165Keystone CA\u5185\u7684\u64a4\u9500\u5217\u8868\u4e2d\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6b64\u5217\u8868\u88abAPI Endpoint \u6bcf\u79d2\u4ece\u4e0b\u5217url\u4e2d\u66f4\u65b0\uff1a curl http://[KEYSTONE ip]:3537/V2.0/tokens/revoked \u5217\u8868\u7684\u5f62\u5f0f\u662f\u4e00\u4e2a\u7b80\u5355\u7684json\u6587\u4ef6\uff1a { \"revoked\": [ { \"expires\": \"2013-05-27T08:31:37Z\", \"id\": \"aef56cc3d1c9192b0257fba1a420fc37\" } \u2026 ] } CA\u8bc1\u4e66\u53ca\u6570\u5b57\u7b7e\u540d curl http://[KEYSTONE IP]:35357/v2.0/certificates/signing curl http://[KEYSTONE IP]:35357/v2.0/certificates/ca PKIZ Token PKIZ \u5728 PKI \u7684\u57fa\u7840\u4e0a\u505a\u4e86\u538b\u7f29\u5904\u7406\uff0c\u4f46\u662f\u538b\u7f29\u7684\u6548\u679c\u6781\u5176\u6709\u9650\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u538b\u7f29\u540e\u7684\u5927\u5c0f\u4e3a PKI token \u7684 90% \u5de6\u53f3\uff0c\u6240\u4ee5 PKIZ \u4e0d\u80fd\u53cb\u597d\u7684\u89e3\u51b3 token size \u592a\u5927\u95ee\u9898\u3002 Fernet Token Reference: Understanding OpenStack Authentication: Keystone PKI \u7406\u89e3 Keystone \u7684\u56db\u79cd Token","title":"Keystone Token"},{"location":"Openstack/Keystone_Token/#keystone_token","text":"","title":"Keystone_Token"},{"location":"Openstack/Keystone_Token/#_1","text":"\u4f5c\u4e3a\u4f7f\u7528API Endpoint\u7684Client \uff0c\u5176\u6570\u91cf\u3001\u7c7b\u578b\u90fd\u662f\u590d\u6742\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u5bf9 Client\u7684\u8eab\u4efd\u8fdb\u884c\u9a8c\u8bc1 \u660e\u6587\u4f20\u8f93\u5bc6\u7801\u4e0d\u5b8c\u5168 Token \u4f5c\u4e3a\u4e34\u65f6\u51ed\u8bc1\uff0c\u53ef\u4ee5\u589e\u52a0\u8ba4\u8bc1\u8fc7\u7a0b\u4e2d\u7684\u5b89\u5168\u6027 \u9700\u8981\u9a8c\u8bc1 Token \u7684\u5408\u6cd5\u6027 API \u9700\u8981\u4ec0\u4e48\u4e1c\u897f role Project expire date Client \u9700\u8981\u4ec0\u4e48\u4e1c\u897f Project Catalog","title":"\u5173\u952e\u70b9"},{"location":"Openstack/Keystone_Token/#_2","text":"UUID tokens Fernet tokens PKI tokens PKIZ tokens","title":"\u56db\u79cd\u7c7b\u578b"},{"location":"Openstack/Keystone_Token/#uuid-tokens","text":"\u57fa\u4e8e Client \u63d0\u4f9b\u7684\u7528\u6237\u540d/\u5bc6\u7801\u662f\u6b63\u786e\u7684\uff1a keystone: \u751f\u6210 UUID token \u5c06 UUID token \u5b58\u50a8\u5728\u5176\u540e\u7aef \u5c06 UUID token \u7684\u526f\u672c\u53d1\u9001\u56de\u5ba2\u6237\u7aef \u5ba2\u6237\u7aef\u5c06\u7f13\u5b58 token \u7136\u540e\uff0cUUID token \u5c06\u968f\u5ba2\u6237\u7aef\u7684\u6bcf\u4e2a API \u8c03\u7528\u4e00\u8d77\u4f20\u9012 \u5728\u6536\u5230\u6bcf\u6b21\u7528\u6237\u7684\u8bf7\u6c42\u540e\uff0cAPI Endpoint \u4f1a\u5c06\u6b64 UUID token \u53d1\u9001\u5230 keystone \u8fdb\u884c\u9a8c\u8bc1 keystone \u5c06\u6536\u5230\u7684 UUID Token \u4e0e\u5b58\u653e\u5728\u540e\u7aef\u7684\u5339\u914d(\u68c0\u67e5 UUID \u5b57\u7b26\u4e32\uff0c\u5230\u671f\u65e5\u671f) keystone \u5c06\u5411 API \u7aef\u70b9\u8fd4\u56de\u201c\u6210\u529f\u201d\u6216\u201c\u5931\u8d25\u201d\u6d88\u606f","title":"UUID tokens"},{"location":"Openstack/Keystone_Token/#pki-token","text":"","title":"PKI Token"},{"location":"Openstack/Keystone_Token/#api-endpoint-keystone","text":"Signing certificate Revocation list CA certificate","title":"\u6bcf\u4e2aAPI Endpoint \u90fd\u4f1a\u4fdd\u7559 keystone \u7684\u526f\u672c\uff1a"},{"location":"Openstack/Keystone_Token/#cms-token","text":"Service catalog User roles Metadata \u751f\u6210\u4ee3\u7801\uff1a def _get_token_id(self, token_data): try: token_json = jsonutils.dumps(token_data, cls=utils.PKIEncoder) token_id = str(cms.cms_sign_token(token_json, CONF.signing.certfile, CONF.signing.keyfile)) return token_id \u5185\u5bb9\u5982\u4e0b\uff1a { \"token\": { \"methods\": [ \"password\" ], \"roles\": [{\"id\": \"5642056d336b4c2a894882425ce22a86\", \"name\": \"admin\"}], \"expires_at\": \"2015-12-25T09:57:28.404275Z\", \"project\": { \"domain\": { \"id\": \"default\", \"name\": \"Default\"}, \"id\": \"144d8a99a42447379ac37f78bf0ef608\", \"name\": \"admin\"}, \"catalog\": [ { \"endpoints\": [ { \"region_id\": \"RegionOne\", \"url\": \"http://controller:5000/v2.0\", \"region\": \"RegionOne\", \"interface\": \"public\", \"id\": \"3837de623efd4af799e050d4d8d1f307\" }, ...... ]}], \"extras\": {}, \"user\": { \"domain\": {\"id\": \"default\", \"name\": \"Default\"}, \"id\": \"1552d60a042e4a2caa07ea7ae6aa2f09\", \"name\": \"admin\"}, \"audit_ids\": [\"ZCvZW2TtTgiaAsVA8qmc3A\"], \"issued_at\": \"2015-12-25T08:57:28.404304Z\" } } token_data \u7ecf cms.cms_sign_token \u7b7e\u540d\u751f\u6210\u7684 token_id \u5982\u4e0b\uff0c\u5171 1932 Byte\uff1a MIIKoZIhvcNAQcCoIIFljCCBZICAQExDTALBglghkgBZQMEAgEwggPzBgkqhkiG9w0B ...... rhr0acV3bMKzmqvViHf-fPVnLDMJajOWSuhimqfLZHRdr+ck0WVQosB6+M6iAvrEF7v","title":"\u751f\u6210CMS Token \uff0c\u4f7f\u7528\u5982\u4e0b\u6570\u636e\uff1a"},{"location":"Openstack/Keystone_Token/#_3","text":"\u4e0e\u6570\u5b57\u8bc1\u4e66\u7684\u7b7e\u540d\u65b9\u5f0f\u5b58\u5728\u5dee\u5f02\uff0c\u76f4\u63a5\u5c06token_data\u7ecf\u8fc7CMS\u52a0\u5bc6\u6210token\u3002API Endpoint\u6536\u5230Client\u53d1\u9001\u7684token\u540e\uff0c\u76f4\u63a5\u4f7f\u7528CA Certificate\u5185\u7684\u516c\u94a5\u89e3\u5bc6\u3002","title":"\u6ce8\u610f\u4e8b\u9879\uff1a"},{"location":"Openstack/Keystone_Token/#token","text":"PKI Token\u4f7fOpenstack API Endpoint\u80fd\u591f\u901a\u8fc7\u68c0\u67e5Keystone\u7684\u7b7e\u540d\u8fdb\u884c\u4ee4\u724c\u6709\u6548\u6027\u548c\u79bb\u7ebf\u9a8c\u8bc1 \u4ee5\u4e0b\u4e09\u6837\u4e1c\u897f\u90fd\u5e94\u8be5\u88ab\u9a8c\u8bc1\uff1a Token \u7684\u7b7e\u540d Token \u7684\u6709\u6548\u671f Token \u662f\u5426\u88ab\u5220\u9664\uff08\u64a4\u9500\uff09 \u88ab\u5220\u9664\u7684token\u88ab\u5f3a\u5236\u653e\u5165Keystone CA\u5185\u7684\u64a4\u9500\u5217\u8868\u4e2d\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6b64\u5217\u8868\u88abAPI Endpoint \u6bcf\u79d2\u4ece\u4e0b\u5217url\u4e2d\u66f4\u65b0\uff1a curl http://[KEYSTONE ip]:3537/V2.0/tokens/revoked \u5217\u8868\u7684\u5f62\u5f0f\u662f\u4e00\u4e2a\u7b80\u5355\u7684json\u6587\u4ef6\uff1a { \"revoked\": [ { \"expires\": \"2013-05-27T08:31:37Z\", \"id\": \"aef56cc3d1c9192b0257fba1a420fc37\" } \u2026 ] }","title":"Token\u9a8c\u8bc1\u548c\u5230\u671f"},{"location":"Openstack/Keystone_Token/#ca","text":"curl http://[KEYSTONE IP]:35357/v2.0/certificates/signing curl http://[KEYSTONE IP]:35357/v2.0/certificates/ca","title":"CA\u8bc1\u4e66\u53ca\u6570\u5b57\u7b7e\u540d"},{"location":"Openstack/Keystone_Token/#pkiz-token","text":"PKIZ \u5728 PKI \u7684\u57fa\u7840\u4e0a\u505a\u4e86\u538b\u7f29\u5904\u7406\uff0c\u4f46\u662f\u538b\u7f29\u7684\u6548\u679c\u6781\u5176\u6709\u9650\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u538b\u7f29\u540e\u7684\u5927\u5c0f\u4e3a PKI token \u7684 90% \u5de6\u53f3\uff0c\u6240\u4ee5 PKIZ \u4e0d\u80fd\u53cb\u597d\u7684\u89e3\u51b3 token size \u592a\u5927\u95ee\u9898\u3002","title":"PKIZ Token"},{"location":"Openstack/Keystone_Token/#fernet-token","text":"Reference: Understanding OpenStack Authentication: Keystone PKI \u7406\u89e3 Keystone \u7684\u56db\u79cd Token","title":"Fernet Token"},{"location":"Openstack/Networking (neutron) concepts/","text":"Networking (neutron) concepts OpenStack Networking (neutron) manages all networking facets for the Virtual Networking Infrastructure (VNI) and the access layer aspects of the Physical Networking Infrastructure (PNI) in your OpenStack environment. OpenStack Networking enables projects to create advanced virtual network topologies which may include services such as a firewall, a load balancer, and a virtual private network (VPN). Networking provides networks, subnets, and routers as object abstractions. Each abstraction has functionality that mimics its physical counterpart: networks contain subnets, and routers route traffic between different subnets and networks. Any given Networking set up has at least one external network. Unlike the other networks, the external network is not merely a virtually defined network. Instead, it represents a view into a slice of the physical, external network accessible outside the OpenStack installation. IP addresses on the external network are accessible by anybody physically on the outside network. In addition to external networks, any Networking set up has one or more internal networks. These software-defined networks connect directly to the VMs. Only the VMs on any given internal network, or those on subnets connected through interfaces to a similar router, can access VMs connected to that network directly. For the outside network to access VMs, and vice versa, routers between the networks are needed. Each router has one gateway that is connected to an external network and one or more interfaces connected to internal networks. Like a physical router, subnets can access machines on other subnets that are connected to the same router, and machines can access the outside network through the gateway for the router. Additionally, you can allocate IP addresses on external networks to ports on the internal network. Whenever something is connected to a subnet, that connection is called a port. You can associate external network IP addresses with ports to VMs. This way, entities on the outside network can access VMs. Networking also supports security groups . Security groups enable administrators to define firewall rules in groups. A VM can belong to one or more security groups, and Networking applies the rules in those security groups to block or unblock ports, port ranges, or traffic types for that VM. Each plug-in that Networking uses has its own concepts. While not vital to operating the VNI and OpenStack environment, understanding these concepts can help you set up Networking. All Networking installations use a core plug-in and a security group plug-in (or just the No-Op security group plug-in). Additionally, Firewall-as-a-Service (FWaaS) and Load-Balancer-as-a-Service (LBaaS) plug-ins are available. \u7f51\u7edc(neutron)\u6982\u5ff5 Openstack \u7f51\u7edc(neutron)\u7ba1\u7406\u5728Openstack \u73af\u5883\u4e2d\u7684\u865a\u62df\u7f51\u7edc\u57fa\u7840\u8bbe\u65bd(VNI)\u7684\u7f51\u7edc\u5e73\u9762\u548c\u7269\u7406\u7f51\u7edc\u57fa\u7840\u8bbe\u65bd\u7684\u63a5\u5165\u5c42\u3002Openstack\u7f51\u7edc\u4f7f\u80fd\u9879\u76ee\u521b\u5efa\u9ad8\u7ea7\u7684\u865a\u62df\u7f51\u7edc\u62d3\u6251\uff0c\u53ef\u80fd\u5305\u62ec\u670d\u52a1\u6709\u9632\u706b\u5899\u3001\u8d1f\u8f7d\u5747\u8861\u5668\u4ee5\u53ca\u4e00\u4e2a\u865a\u62df\u7684\u79c1\u6709\u7f51\u7edc(VPN)\u3002 \u7f51\u7edc(Networking)\u63d0\u4f9b\u7f51\u7edc(network)\u3001\u5b50\u7f51\u548c\u8def\u7531\u5668\u8fd9\u4e9b\u5bf9\u8c61\u7684\u62bd\u8c61\u3002\u6bcf\u4e2a\u62bd\u8c61\u90fd\u80fd\u6a21\u5f77\u7269\u7406\u526f\u672c\u7684\u529f\u80fd\uff1a\u7f51\u7edc\u5305\u542b\u5b50\u7f51\u548c\u8def\u7531\u5668\u5728\u4e0d\u540c\u7684\u5b50\u7f51\u548c\u7f51\u7edc\u95f4\u8def\u7531\u6d41\u91cf\u3002 \u4efb\u4f55\u7ed9\u5b9a\u7684\u7f51\u7edc(Networking)\u90fd\u9700\u8981\u8bbe\u7f6e\u81f3\u5c11\u4e00\u4e2a\u5916\u90e8\u7f51\u7edc(network)\u3002\u5b83\u4e0d\u50cf\u5176\u5b83\u7f51\u7edc\uff0c\u8fd9\u4e2a\u5916\u90e8\u7f51\u7edc\u4e0d\u4ec5\u4ec5\u662f\u4e2a\u865a\u62df\u5b9a\u4e49\u7684\u7f51\u7edc\u3002\u53cd\u800c\uff0c\u5b83\u4ee3\u8868\u7740\u7269\u7406\u7684\u67d0\u4e00\u90e8\u5206\u7684\u89c6\u56fe\uff0c\u901a\u8fc7\u5916\u90e8\u7f51\u7edc\u80fd\u591f\u8bbf\u95eeOpenstack\u7ba1\u7406\u7684\u5916\u90e8\u533a\u57df\u3002\u5728\u5916\u90e8\u7f51\u7edc\u4e0a\u7684IP\u5730\u5740\u80fd\u591f\u901a\u8fc7\u5916\u90e8\u533a\u57df\u7f51\u7edc\u7684\u4efb\u610f\u7269\u7406\u90e8\u5206\u8bbf\u95ee\u3002 \u9664\u4e86\u5916\u90e8\u7f51\u7edc\uff0c\u6240\u6709\u7684\u7f51\u7edc\uff08Networking\uff09\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u6216\u66f4\u591a\u7684\u5185\u7edc\u7f51\u7edc\u3002\u8fd9\u4e2a\u8f6f\u4ef6\u5b9a\u4e49\u7684\u7f51\u7edc\u76f4\u63a5\u4e0e\u865a\u62df\u673a\u76f8\u8fde\u3002\u53ea\u6709\u5728\u4efb\u610f\u7ed9\u5b9a\u7684\u5185\u90e8\u7f51\u7edc\u7684\u865a\u62df\u673a\uff0c\u6216\u8005\u90a3\u4e9b\u901a\u8fc7\u63a5\u53e3\u8fde\u63a5\u5b50\u7f51\u7684\u7c7b\u4f3c\u8def\u7531\u5668\uff0c\u624d\u80fd\u901a\u8fc7\u7f51\u7edc\u76f4\u63a5\u8bbf\u95ee\u865a\u62df\u673a\u3002 \u5bf9\u4e8e\u5916\u90e8\u533a\u57df\u7684\u7f51\u7edc\u8bbf\u95ee\u865a\u62df\u673a\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u5728\u8fd9\u4e9b\u7f51\u7edc\u4e4b\u95f4\u8def\u7531\u5668\u662f\u5fc5\u987b\u7684\u3002\u6bcf\u4e2a\u8def\u7531\u5668\u62e5\u6709\u4e00\u4e2a\u8fde\u63a5\u5916\u90e8\u7f51\u7edc\u7684\u7f51\u5173\u548c\u4e00\u4e2a\u6216\u591a\u4e2a\u8fde\u63a5\u5185\u90e8\u7f51\u7edc\u7684\u63a5\u53e3\u3002\u5c31\u50cf\u4e00\u4e2a\u7269\u7406\u7684\u8def\u7531\u5668\uff0c\u8fde\u63a5\u5230\u540c\u4e00\u4e2a\u8def\u7531\u5668\u4e0a\u7684\u4e00\u4e2a\u5b50\u7f51\u80fd\u591f\u8bbf\u95ee\u53e6\u4e00\u4e2a\u5b50\u7f51\uff0c\u5e76\u4e14\u8bbe\u5907\u4e5f\u80fd\u901a\u8fc7\u8def\u7531\u5668\u4e0a\u7684\u7f51\u5173\u8bbf\u95ee\u5916\u90e8\u533a\u57df\u7684\u7f51\u7edc\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5206\u914d\u5916\u90e8\u7f51\u7edc\u4e0a\u7684IP\u5730\u5740\u7ed9\u5185\u90e8\u7f51\u7edc\u7684\u7aef\u53e3\u3002\u6bcf\u5f53\u6709\u4e00\u4e2a\u4e1c\u897f\u8fde\u63a5\u5230\u5b50\u7f51\uff0c\u8fd9\u4e2a\u8fde\u63a5\u53eb\u4f5c\u7aef\u53e3\u3002\u4f60\u80fd\u591f\u5c06\u5916\u90e8\u7f51\u7edc\u7684IP\u5730\u5740\u548c\u8fde\u63a5\u865a\u62df\u673a\u7684\u7aef\u53e3\u5173\u8054\u3002\u8fd9\u6837\uff0c\u5728\u5916\u90e8\u533a\u57df\u7f51\u7edc\u7684\u5b9e\u4f53\u5c31\u80fd\u8bbf\u95ee\u865a\u62df\u673a\u4e86\u3002 \u7f51\u7edc(Networking)\u4e5f\u652f\u6301 \u5b89\u5168\u7ec4 \u3002\u5b89\u5168\u7ec4\u4f7f\u80fd\u7ba1\u7406\u5458\u5728\u7ec4\u5185\u5b9a\u4e49\u9632\u706b\u5899\u89c4\u5219\u3002\u4e00\u4e2a\u865a\u62df\u673a\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u5b89\u5168\u7ec4\uff0c\u7f51\u7edc\uff08Networking\uff09\u5728\u90a3\u4e9b\u5b89\u5168\u7ec4\u5185\u4e3a\u865a\u62df\u673a\u63d0\u4f9b\u89c4\u5219\u963b\u585e\u6216\u4e0d\u963b\u585e\u7aef\u53e3\u3001\u7aef\u53e3\u8303\u56f4\u6216\u8005\u6d41\u91cf\u7684\u6d41\u91cf\u3002 \u6bcf\u4e2a\u7f51\u7edc(Networking)\u63d2\u4ef6\u90fd\u4f7f\u7528\u5b83\u62e5\u6709\u7684\u6982\u5ff5\u3002\u867d\u7136\u8fd9\u4e9b\u5bf9\u4e8e\u64cd\u4f5cVNI\u548cOpenstack\u73af\u5883\u4e0d\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u660e\u767d\u8fd9\u4e9b\u6982\u5ff5\u80fd\u591f\u5e2e\u52a9\u4f60\u914d\u7f6e\u7f51\u7edc\uff08Networking)\u3002\u6240\u6709\u7684\u7f51\u7edc\u5b89\u88c5\u90fd\u4f7f\u7528\u4e00\u4e2acore \u63d2\u4ef6\u548c\u4e00\u4e2a\u5b89\u5168\u7ec4\u63d2\u4ef6\uff08\u6216\u8005\u53ea\u662f\u4e00\u4e2aNo-Op \u5b89\u5168\u7ec4\u63d2\u4ef6\uff09\u3002\u53e6\u5916\uff0c\u9632\u706b\u5899\u5373\u670d\u52a1\uff08FWaaS)\u548c\u8d1f\u8f7d\u5747\u8861\u5373\u670d\u52a1(LBaaS)\u63d2\u4ef6\u4e5f\u662f\u6709\u6548\u7684\u3002 facet[n.]\u9762\uff1b\u65b9\u9762\uff1b\u5c0f\u5e73\u9762 aspect[n.]\u65b9\u9762\uff1b\u65b9\u5411 abstraction[n.]\u62bd\u8c61 functionality[n.]\u529f\u80fd mimic[vt.]\u6a21\u4eff counterpart[n.]\u526f\u672c least[adj.]\u6700\u5c0f\u7684\uff1b\u6700\u5c11\u7684 merely[adv.]\u4ec5\u4ec5 represent[vt.]\u4ee3\u8868 slice[n.]\u8584\u7247\uff1b\u90e8\u5206 physically[adv.]\u8eab\u4f53\u4e0a in addition to \u9664...\u4e4b\u5916 vice[prep]\u4ee3\u66ff versa[adj.]\u53cd\u7684 vice versa \u53cd\u4e4b\u4ea6\u7136 additionally[adv.]\u6b64\u5916 whenever[conj.]\u6bcf\u5f53\uff1b\u65e0\u8bba\u4f55\u65f6 assoiate[vt.]\u8054\u60f3\uff1b\u4f7f\u8054\u5408 entity[n.]\u5b9e\u4f53 vital[adj.]\u81f3\u5173\u91cd\u8981\u7684 while[conj.]\u867d\u7136\uff1b\u7136\u800c\uff1b\u5f53...\u7684\u65f6\u5019","title":"Networking (neutron) concepts"},{"location":"Openstack/Networking (neutron) concepts/#networking-neutron-concepts","text":"OpenStack Networking (neutron) manages all networking facets for the Virtual Networking Infrastructure (VNI) and the access layer aspects of the Physical Networking Infrastructure (PNI) in your OpenStack environment. OpenStack Networking enables projects to create advanced virtual network topologies which may include services such as a firewall, a load balancer, and a virtual private network (VPN). Networking provides networks, subnets, and routers as object abstractions. Each abstraction has functionality that mimics its physical counterpart: networks contain subnets, and routers route traffic between different subnets and networks. Any given Networking set up has at least one external network. Unlike the other networks, the external network is not merely a virtually defined network. Instead, it represents a view into a slice of the physical, external network accessible outside the OpenStack installation. IP addresses on the external network are accessible by anybody physically on the outside network. In addition to external networks, any Networking set up has one or more internal networks. These software-defined networks connect directly to the VMs. Only the VMs on any given internal network, or those on subnets connected through interfaces to a similar router, can access VMs connected to that network directly. For the outside network to access VMs, and vice versa, routers between the networks are needed. Each router has one gateway that is connected to an external network and one or more interfaces connected to internal networks. Like a physical router, subnets can access machines on other subnets that are connected to the same router, and machines can access the outside network through the gateway for the router. Additionally, you can allocate IP addresses on external networks to ports on the internal network. Whenever something is connected to a subnet, that connection is called a port. You can associate external network IP addresses with ports to VMs. This way, entities on the outside network can access VMs. Networking also supports security groups . Security groups enable administrators to define firewall rules in groups. A VM can belong to one or more security groups, and Networking applies the rules in those security groups to block or unblock ports, port ranges, or traffic types for that VM. Each plug-in that Networking uses has its own concepts. While not vital to operating the VNI and OpenStack environment, understanding these concepts can help you set up Networking. All Networking installations use a core plug-in and a security group plug-in (or just the No-Op security group plug-in). Additionally, Firewall-as-a-Service (FWaaS) and Load-Balancer-as-a-Service (LBaaS) plug-ins are available.","title":"Networking (neutron) concepts"},{"location":"Openstack/Networking (neutron) concepts/#neutron","text":"Openstack \u7f51\u7edc(neutron)\u7ba1\u7406\u5728Openstack \u73af\u5883\u4e2d\u7684\u865a\u62df\u7f51\u7edc\u57fa\u7840\u8bbe\u65bd(VNI)\u7684\u7f51\u7edc\u5e73\u9762\u548c\u7269\u7406\u7f51\u7edc\u57fa\u7840\u8bbe\u65bd\u7684\u63a5\u5165\u5c42\u3002Openstack\u7f51\u7edc\u4f7f\u80fd\u9879\u76ee\u521b\u5efa\u9ad8\u7ea7\u7684\u865a\u62df\u7f51\u7edc\u62d3\u6251\uff0c\u53ef\u80fd\u5305\u62ec\u670d\u52a1\u6709\u9632\u706b\u5899\u3001\u8d1f\u8f7d\u5747\u8861\u5668\u4ee5\u53ca\u4e00\u4e2a\u865a\u62df\u7684\u79c1\u6709\u7f51\u7edc(VPN)\u3002 \u7f51\u7edc(Networking)\u63d0\u4f9b\u7f51\u7edc(network)\u3001\u5b50\u7f51\u548c\u8def\u7531\u5668\u8fd9\u4e9b\u5bf9\u8c61\u7684\u62bd\u8c61\u3002\u6bcf\u4e2a\u62bd\u8c61\u90fd\u80fd\u6a21\u5f77\u7269\u7406\u526f\u672c\u7684\u529f\u80fd\uff1a\u7f51\u7edc\u5305\u542b\u5b50\u7f51\u548c\u8def\u7531\u5668\u5728\u4e0d\u540c\u7684\u5b50\u7f51\u548c\u7f51\u7edc\u95f4\u8def\u7531\u6d41\u91cf\u3002 \u4efb\u4f55\u7ed9\u5b9a\u7684\u7f51\u7edc(Networking)\u90fd\u9700\u8981\u8bbe\u7f6e\u81f3\u5c11\u4e00\u4e2a\u5916\u90e8\u7f51\u7edc(network)\u3002\u5b83\u4e0d\u50cf\u5176\u5b83\u7f51\u7edc\uff0c\u8fd9\u4e2a\u5916\u90e8\u7f51\u7edc\u4e0d\u4ec5\u4ec5\u662f\u4e2a\u865a\u62df\u5b9a\u4e49\u7684\u7f51\u7edc\u3002\u53cd\u800c\uff0c\u5b83\u4ee3\u8868\u7740\u7269\u7406\u7684\u67d0\u4e00\u90e8\u5206\u7684\u89c6\u56fe\uff0c\u901a\u8fc7\u5916\u90e8\u7f51\u7edc\u80fd\u591f\u8bbf\u95eeOpenstack\u7ba1\u7406\u7684\u5916\u90e8\u533a\u57df\u3002\u5728\u5916\u90e8\u7f51\u7edc\u4e0a\u7684IP\u5730\u5740\u80fd\u591f\u901a\u8fc7\u5916\u90e8\u533a\u57df\u7f51\u7edc\u7684\u4efb\u610f\u7269\u7406\u90e8\u5206\u8bbf\u95ee\u3002 \u9664\u4e86\u5916\u90e8\u7f51\u7edc\uff0c\u6240\u6709\u7684\u7f51\u7edc\uff08Networking\uff09\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u6216\u66f4\u591a\u7684\u5185\u7edc\u7f51\u7edc\u3002\u8fd9\u4e2a\u8f6f\u4ef6\u5b9a\u4e49\u7684\u7f51\u7edc\u76f4\u63a5\u4e0e\u865a\u62df\u673a\u76f8\u8fde\u3002\u53ea\u6709\u5728\u4efb\u610f\u7ed9\u5b9a\u7684\u5185\u90e8\u7f51\u7edc\u7684\u865a\u62df\u673a\uff0c\u6216\u8005\u90a3\u4e9b\u901a\u8fc7\u63a5\u53e3\u8fde\u63a5\u5b50\u7f51\u7684\u7c7b\u4f3c\u8def\u7531\u5668\uff0c\u624d\u80fd\u901a\u8fc7\u7f51\u7edc\u76f4\u63a5\u8bbf\u95ee\u865a\u62df\u673a\u3002 \u5bf9\u4e8e\u5916\u90e8\u533a\u57df\u7684\u7f51\u7edc\u8bbf\u95ee\u865a\u62df\u673a\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u5728\u8fd9\u4e9b\u7f51\u7edc\u4e4b\u95f4\u8def\u7531\u5668\u662f\u5fc5\u987b\u7684\u3002\u6bcf\u4e2a\u8def\u7531\u5668\u62e5\u6709\u4e00\u4e2a\u8fde\u63a5\u5916\u90e8\u7f51\u7edc\u7684\u7f51\u5173\u548c\u4e00\u4e2a\u6216\u591a\u4e2a\u8fde\u63a5\u5185\u90e8\u7f51\u7edc\u7684\u63a5\u53e3\u3002\u5c31\u50cf\u4e00\u4e2a\u7269\u7406\u7684\u8def\u7531\u5668\uff0c\u8fde\u63a5\u5230\u540c\u4e00\u4e2a\u8def\u7531\u5668\u4e0a\u7684\u4e00\u4e2a\u5b50\u7f51\u80fd\u591f\u8bbf\u95ee\u53e6\u4e00\u4e2a\u5b50\u7f51\uff0c\u5e76\u4e14\u8bbe\u5907\u4e5f\u80fd\u901a\u8fc7\u8def\u7531\u5668\u4e0a\u7684\u7f51\u5173\u8bbf\u95ee\u5916\u90e8\u533a\u57df\u7684\u7f51\u7edc\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5206\u914d\u5916\u90e8\u7f51\u7edc\u4e0a\u7684IP\u5730\u5740\u7ed9\u5185\u90e8\u7f51\u7edc\u7684\u7aef\u53e3\u3002\u6bcf\u5f53\u6709\u4e00\u4e2a\u4e1c\u897f\u8fde\u63a5\u5230\u5b50\u7f51\uff0c\u8fd9\u4e2a\u8fde\u63a5\u53eb\u4f5c\u7aef\u53e3\u3002\u4f60\u80fd\u591f\u5c06\u5916\u90e8\u7f51\u7edc\u7684IP\u5730\u5740\u548c\u8fde\u63a5\u865a\u62df\u673a\u7684\u7aef\u53e3\u5173\u8054\u3002\u8fd9\u6837\uff0c\u5728\u5916\u90e8\u533a\u57df\u7f51\u7edc\u7684\u5b9e\u4f53\u5c31\u80fd\u8bbf\u95ee\u865a\u62df\u673a\u4e86\u3002 \u7f51\u7edc(Networking)\u4e5f\u652f\u6301 \u5b89\u5168\u7ec4 \u3002\u5b89\u5168\u7ec4\u4f7f\u80fd\u7ba1\u7406\u5458\u5728\u7ec4\u5185\u5b9a\u4e49\u9632\u706b\u5899\u89c4\u5219\u3002\u4e00\u4e2a\u865a\u62df\u673a\u53ef\u4ee5\u5c5e\u4e8e\u4e00\u4e2a\u6216\u591a\u4e2a\u5b89\u5168\u7ec4\uff0c\u7f51\u7edc\uff08Networking\uff09\u5728\u90a3\u4e9b\u5b89\u5168\u7ec4\u5185\u4e3a\u865a\u62df\u673a\u63d0\u4f9b\u89c4\u5219\u963b\u585e\u6216\u4e0d\u963b\u585e\u7aef\u53e3\u3001\u7aef\u53e3\u8303\u56f4\u6216\u8005\u6d41\u91cf\u7684\u6d41\u91cf\u3002 \u6bcf\u4e2a\u7f51\u7edc(Networking)\u63d2\u4ef6\u90fd\u4f7f\u7528\u5b83\u62e5\u6709\u7684\u6982\u5ff5\u3002\u867d\u7136\u8fd9\u4e9b\u5bf9\u4e8e\u64cd\u4f5cVNI\u548cOpenstack\u73af\u5883\u4e0d\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u660e\u767d\u8fd9\u4e9b\u6982\u5ff5\u80fd\u591f\u5e2e\u52a9\u4f60\u914d\u7f6e\u7f51\u7edc\uff08Networking)\u3002\u6240\u6709\u7684\u7f51\u7edc\u5b89\u88c5\u90fd\u4f7f\u7528\u4e00\u4e2acore \u63d2\u4ef6\u548c\u4e00\u4e2a\u5b89\u5168\u7ec4\u63d2\u4ef6\uff08\u6216\u8005\u53ea\u662f\u4e00\u4e2aNo-Op \u5b89\u5168\u7ec4\u63d2\u4ef6\uff09\u3002\u53e6\u5916\uff0c\u9632\u706b\u5899\u5373\u670d\u52a1\uff08FWaaS)\u548c\u8d1f\u8f7d\u5747\u8861\u5373\u670d\u52a1(LBaaS)\u63d2\u4ef6\u4e5f\u662f\u6709\u6548\u7684\u3002 facet[n.]\u9762\uff1b\u65b9\u9762\uff1b\u5c0f\u5e73\u9762 aspect[n.]\u65b9\u9762\uff1b\u65b9\u5411 abstraction[n.]\u62bd\u8c61 functionality[n.]\u529f\u80fd mimic[vt.]\u6a21\u4eff counterpart[n.]\u526f\u672c least[adj.]\u6700\u5c0f\u7684\uff1b\u6700\u5c11\u7684 merely[adv.]\u4ec5\u4ec5 represent[vt.]\u4ee3\u8868 slice[n.]\u8584\u7247\uff1b\u90e8\u5206 physically[adv.]\u8eab\u4f53\u4e0a in addition to \u9664...\u4e4b\u5916 vice[prep]\u4ee3\u66ff versa[adj.]\u53cd\u7684 vice versa \u53cd\u4e4b\u4ea6\u7136 additionally[adv.]\u6b64\u5916 whenever[conj.]\u6bcf\u5f53\uff1b\u65e0\u8bba\u4f55\u65f6 assoiate[vt.]\u8054\u60f3\uff1b\u4f7f\u8054\u5408 entity[n.]\u5b9e\u4f53 vital[adj.]\u81f3\u5173\u91cd\u8981\u7684 while[conj.]\u867d\u7136\uff1b\u7136\u800c\uff1b\u5f53...\u7684\u65f6\u5019","title":"\u7f51\u7edc(neutron)\u6982\u5ff5"},{"location":"Openstack/Networking service overview/","text":"Networking service overview OpenStack Networking (neutron) allows you to create and attach interface devices managed by other OpenStack services to networks. Plug-ins can be implemented to accommodate different networking equipment and software, providing flexibility to OpenStack architecture and deployment. It includes the following components: neutron-server Accepts and routes API requests to the appropriate OpenStack Networking plug-in for action. OpenStack Networking plug-ins and agents Plug and unplug ports, create networks or subnets, and provide IP addressing. These plug-ins and agents differ depending on the vendor and technologies used in the particular cloud. OpenStack Networking ships with plug-ins and agents for Cisco virtual and physical switches, NEC OpenFlow products, Open vSwitch, Linux bridging, and the VMware NSX product.The common agents are L3 (layer 3), DHCP (dynamic host IP addressing), and a plug-in agent. Messaging queue Used by most OpenStack Networking installations to route information between the neutron-server and various agents. Also acts as a database to store networking state for particular plug-ins. OpenStack Networking mainly interacts with OpenStack Compute to provide networks and connectivity for its instances. implement[vt.]\u5b9e\u65bd\uff0c\u6267\u884c\uff1b\u5b9e\u73b0\uff0c\u4f7f\u751f\u6548 accommodate[vt.]\u5bb9\u7eb3\uff1b\u4f7f\u9002\u5e94\uff1b\u4f9b\u5e94\uff1b\u8c03\u89e3 equipement[n.]\u8bbe\u5907\uff0c\u88c5\u5907\uff1b\u5668\u6750 flexibility[n.]\u7075\u6d3b\u6027\uff1b\u5f39\u6027\uff1b\u9002\u5e94\u6027 appropriate[adj.]\u9002\u5f53\u7684\uff1b\u6070\u5f53\u7684\uff1b\u5408\u9002\u7684 depend[vt.]\u4f9d\u8d56 particular[adj.]\u7279\u522b\u7684\uff1b\u8be6\u7ec6\u7684\uff1b\u72ec\u6709\u7684\uff1b ship with \u9644\u5e26 installation[n.]\u5b89\u88c5\uff0c\u88c5\u7f6e\uff1b\u5c31\u804c various[adj.]\u5404\u79cd\u5404\u6837\u7684\uff1b\u591a\u65b9\u9762\u7684 mainly[adv.]\u4e3b\u8981\u5730\uff0c\u5927\u4f53\u4e0a \u7f51\u7edc\u670d\u52a1\u6982\u89c8 Openstack Networking(neutron) \u5141\u8bb8\u4f60\u521b\u5efa\u548c\u8fde\u63a5\u63a5\u53e3\u8bbe\u5907\uff0c\u901a\u8fc7\u5176\u5b83\u7684Openstack\u670d\u52a1\u5bf9\u7f51\u7edc\u8fdb\u884c\u7ba1\u7406\u3002\u63d2\u4ef6\u80fd\u591f\u88ab\u5b9e\u73b0\u6210\u80fd\u591f\u9002\u5e94\u4e0d\u540c\u7684\u7f51\u7edc\u8bbe\u5907\u548c\u8f6f\u4ef6\uff0c\u5bf9Openstack \u7684\u67b6\u6784\u548c\u5b9e\u73b0\u63d0\u4f9b\u7075\u6d3b\u6027\u3002 \u5b83\u5305\u62ec\u4e86\u4ee5\u4e0b\u7ec4\u4ef6\uff1a neutron-server \u63a5\u53d7API\u8bf7\u6c42\u5e76\u5c06\u5176\u8def\u7531\u5230\u9002\u5f53\u7684Openstack \u7f51\u7edc\u63d2\u4ef6\u6267\u884c\u52a8\u4f5c\u3002 Openstack Networking plug-ins and agents \u63d2\u5165\u548c\u62d4\u51fa\u7aef\u53e3\uff0c\u521b\u5efa\u7f51\u7edc\u6216\u5b50\u7f51\uff0c\u4ee5\u53ca\u63d0\u4f9bIP\u5730\u5740\u3002\u63d2\u4ef6\u548c\u4ee3\u7406\u5728\u63d0\u4f9b\u5546\u548c\u5728\u4e2a\u522b\u4e91\u7684\u6280\u672f\u4f7f\u7528\u4e0a\u6709\u7740\u4e0d\u540c\u7684\u4f9d\u8d56\u3002Openstack \u7f51\u7edc\u9644\u5e26\u63d2\u4ef6\u548c\u4ee3\u7406\u7528\u4e8e\u601d\u79d1\u7684\u865a\u62df\u3001\u7269\u7406\u4ea4\u6362\u673a\uff0cNEC OpenFlow\u4ea7\u54c1\uff0cOpenstack vSwitch,Linux bridging,\u548cVMware NSX \u4ea7\u54c1\u3002 \u5e38\u89c1\u7684\u4ee3\u7406\u6709L3\uff08layer 3)\uff0cDHCP\uff08\u52a8\u6001\u4e3b\u673aIP\u5730\u5740\uff09\uff0c\u548c\u63d2\u4ef6\u4ee3\u7406\u3002 \u6d88\u606f\u961f\u5217 \u7528\u5728\u5927\u90e8\u5206\u7684Openstack \u7f51\u7edc\u88c5\u7f6e\u5728neutron-server\u548c\u5404\u79cd\u5404\u6837\u7684\u4ee3\u7406\u4e4b\u95f4\u8def\u7531\u4fe1\u606f\u3002\u4e5f\u5145\u5f53\u4e00\u4e2a\u6570\u636e\u5e93\u4e3a\u4e2a\u522b\u63d2\u4ef6\u5b58\u50a8\u7f51\u7edc\u72b6\u6001\u3002 Openstack Networking\u4e3b\u8981\u548cOpenstack Compute\u4ea4\u4e92\uff0c\u7528\u4e8e\u63d0\u4f9b\u7f51\u7edc\u548c\u8fde\u63a5\u5b9e\u4f8b\u3002","title":"Networking service overview"},{"location":"Openstack/Networking service overview/#networking-service-overview","text":"OpenStack Networking (neutron) allows you to create and attach interface devices managed by other OpenStack services to networks. Plug-ins can be implemented to accommodate different networking equipment and software, providing flexibility to OpenStack architecture and deployment. It includes the following components: neutron-server Accepts and routes API requests to the appropriate OpenStack Networking plug-in for action. OpenStack Networking plug-ins and agents Plug and unplug ports, create networks or subnets, and provide IP addressing. These plug-ins and agents differ depending on the vendor and technologies used in the particular cloud. OpenStack Networking ships with plug-ins and agents for Cisco virtual and physical switches, NEC OpenFlow products, Open vSwitch, Linux bridging, and the VMware NSX product.The common agents are L3 (layer 3), DHCP (dynamic host IP addressing), and a plug-in agent. Messaging queue Used by most OpenStack Networking installations to route information between the neutron-server and various agents. Also acts as a database to store networking state for particular plug-ins. OpenStack Networking mainly interacts with OpenStack Compute to provide networks and connectivity for its instances. implement[vt.]\u5b9e\u65bd\uff0c\u6267\u884c\uff1b\u5b9e\u73b0\uff0c\u4f7f\u751f\u6548 accommodate[vt.]\u5bb9\u7eb3\uff1b\u4f7f\u9002\u5e94\uff1b\u4f9b\u5e94\uff1b\u8c03\u89e3 equipement[n.]\u8bbe\u5907\uff0c\u88c5\u5907\uff1b\u5668\u6750 flexibility[n.]\u7075\u6d3b\u6027\uff1b\u5f39\u6027\uff1b\u9002\u5e94\u6027 appropriate[adj.]\u9002\u5f53\u7684\uff1b\u6070\u5f53\u7684\uff1b\u5408\u9002\u7684 depend[vt.]\u4f9d\u8d56 particular[adj.]\u7279\u522b\u7684\uff1b\u8be6\u7ec6\u7684\uff1b\u72ec\u6709\u7684\uff1b ship with \u9644\u5e26 installation[n.]\u5b89\u88c5\uff0c\u88c5\u7f6e\uff1b\u5c31\u804c various[adj.]\u5404\u79cd\u5404\u6837\u7684\uff1b\u591a\u65b9\u9762\u7684 mainly[adv.]\u4e3b\u8981\u5730\uff0c\u5927\u4f53\u4e0a","title":"Networking service overview"},{"location":"Openstack/Networking service overview/#_1","text":"Openstack Networking(neutron) \u5141\u8bb8\u4f60\u521b\u5efa\u548c\u8fde\u63a5\u63a5\u53e3\u8bbe\u5907\uff0c\u901a\u8fc7\u5176\u5b83\u7684Openstack\u670d\u52a1\u5bf9\u7f51\u7edc\u8fdb\u884c\u7ba1\u7406\u3002\u63d2\u4ef6\u80fd\u591f\u88ab\u5b9e\u73b0\u6210\u80fd\u591f\u9002\u5e94\u4e0d\u540c\u7684\u7f51\u7edc\u8bbe\u5907\u548c\u8f6f\u4ef6\uff0c\u5bf9Openstack \u7684\u67b6\u6784\u548c\u5b9e\u73b0\u63d0\u4f9b\u7075\u6d3b\u6027\u3002 \u5b83\u5305\u62ec\u4e86\u4ee5\u4e0b\u7ec4\u4ef6\uff1a neutron-server \u63a5\u53d7API\u8bf7\u6c42\u5e76\u5c06\u5176\u8def\u7531\u5230\u9002\u5f53\u7684Openstack \u7f51\u7edc\u63d2\u4ef6\u6267\u884c\u52a8\u4f5c\u3002 Openstack Networking plug-ins and agents \u63d2\u5165\u548c\u62d4\u51fa\u7aef\u53e3\uff0c\u521b\u5efa\u7f51\u7edc\u6216\u5b50\u7f51\uff0c\u4ee5\u53ca\u63d0\u4f9bIP\u5730\u5740\u3002\u63d2\u4ef6\u548c\u4ee3\u7406\u5728\u63d0\u4f9b\u5546\u548c\u5728\u4e2a\u522b\u4e91\u7684\u6280\u672f\u4f7f\u7528\u4e0a\u6709\u7740\u4e0d\u540c\u7684\u4f9d\u8d56\u3002Openstack \u7f51\u7edc\u9644\u5e26\u63d2\u4ef6\u548c\u4ee3\u7406\u7528\u4e8e\u601d\u79d1\u7684\u865a\u62df\u3001\u7269\u7406\u4ea4\u6362\u673a\uff0cNEC OpenFlow\u4ea7\u54c1\uff0cOpenstack vSwitch,Linux bridging,\u548cVMware NSX \u4ea7\u54c1\u3002 \u5e38\u89c1\u7684\u4ee3\u7406\u6709L3\uff08layer 3)\uff0cDHCP\uff08\u52a8\u6001\u4e3b\u673aIP\u5730\u5740\uff09\uff0c\u548c\u63d2\u4ef6\u4ee3\u7406\u3002 \u6d88\u606f\u961f\u5217 \u7528\u5728\u5927\u90e8\u5206\u7684Openstack \u7f51\u7edc\u88c5\u7f6e\u5728neutron-server\u548c\u5404\u79cd\u5404\u6837\u7684\u4ee3\u7406\u4e4b\u95f4\u8def\u7531\u4fe1\u606f\u3002\u4e5f\u5145\u5f53\u4e00\u4e2a\u6570\u636e\u5e93\u4e3a\u4e2a\u522b\u63d2\u4ef6\u5b58\u50a8\u7f51\u7edc\u72b6\u6001\u3002 Openstack Networking\u4e3b\u8981\u548cOpenstack Compute\u4ea4\u4e92\uff0c\u7528\u4e8e\u63d0\u4f9b\u7f51\u7edc\u548c\u8fde\u63a5\u5b9e\u4f8b\u3002","title":"\u7f51\u7edc\u670d\u52a1\u6982\u89c8"},{"location":"Openstack/Openstack Image Service/","text":"Openstack Image Service Introduction The Openstack image service allows users to discover, register, share, and retrieve virtual machine(VM) images and related metadata. It exposes a RESTful API to expose this functionality over a web-based API. \u5173\u952e\u70b9 \u8be5\u670d\u52a1\u63d0\u4f9b\u7684\u955c\u50cf\u4ec5\u4f5c\u4e3a\u4ea7\u751f\u7cfb\u7edf\u76d8 Image format format description Raw This is an unstructured disk image format. vhd This is the VHD disk format, a common disk format used by virtual machine monitors from VMWare. vmdk Another common disk format supported by many common virtual machine monitors. VDI A disk format supported by VirtualBox virtual machine monitor and the QEMU emulator ISO An archive format for the data contents of an optical disc(e.g.CDROM) QCOW2 A disk format supported by the QEMU emulator that can expand dynamically and supports Copy on Write. aki This indicates what is stored in Glance is an Amazon kernel image. ari This indicates what is stored in Glance is an Amazon ramdisk image. ami This indicates what is stored in Glance is an Amazon ma image. vhdx Hyper-V Virtual Hard Disk Format sploop Ploop is a disk loopback block device, not unlike loop but with many features like dynamic resize, snapshots, backups etc. The main idea is to put container filesystem in a file.","title":"Openstack Image Service"},{"location":"Openstack/Openstack Image Service/#openstack-image-service","text":"","title":"Openstack Image Service"},{"location":"Openstack/Openstack Image Service/#introduction","text":"The Openstack image service allows users to discover, register, share, and retrieve virtual machine(VM) images and related metadata. It exposes a RESTful API to expose this functionality over a web-based API.","title":"Introduction"},{"location":"Openstack/Openstack Image Service/#_1","text":"\u8be5\u670d\u52a1\u63d0\u4f9b\u7684\u955c\u50cf\u4ec5\u4f5c\u4e3a\u4ea7\u751f\u7cfb\u7edf\u76d8","title":"\u5173\u952e\u70b9"},{"location":"Openstack/Openstack Image Service/#image-format","text":"format description Raw This is an unstructured disk image format. vhd This is the VHD disk format, a common disk format used by virtual machine monitors from VMWare. vmdk Another common disk format supported by many common virtual machine monitors. VDI A disk format supported by VirtualBox virtual machine monitor and the QEMU emulator ISO An archive format for the data contents of an optical disc(e.g.CDROM) QCOW2 A disk format supported by the QEMU emulator that can expand dynamically and supports Copy on Write. aki This indicates what is stored in Glance is an Amazon kernel image. ari This indicates what is stored in Glance is an Amazon ramdisk image. ami This indicates what is stored in Glance is an Amazon ma image. vhdx Hyper-V Virtual Hard Disk Format sploop Ploop is a disk loopback block device, not unlike loop but with many features like dynamic resize, snapshots, backups etc. The main idea is to put container filesystem in a file.","title":"Image format"},{"location":"Openstack/Openstack Keystone/","text":"Openstack Keystone Identity concepts Authentication The process of confirming the identity of a user. To confirm an incoming request, OpenStack Identity validates a set of credentials users supply. Initially, these credentials are a user name and password, or a user name and API key. When OpenStack Identity validates user credentials, it issues an authentication token. Users provide the token in subsequent requests. Credentials Data that confirms the identity of the user. For example, user name and password, user name and API key, or an authentication token that the Identity service provides. Domain An Identity service API v3 entity. Domains are a collection of projects and users that define administrative boundaries for managing Identity entities. Domains can represent an individual, company, or operator-owned space. They expose administrative activities directly to system users. Users can be granted the administrator role for a domain. A domain administrator can create projects, users, and groups in a domain and assign roles to users and groups in a domain. Endpoint A network-accessible address, usually a URL, through which you can access a service. If you are using an extension for templates, you can create an endpoint template that represents the templates of all consumable services that are available across the regions. Group An Identity service API v3 entity. Groups are a collection of users owned by a domain. A group role, granted to a domain or project, applies to all users in the group. Adding or removing users to or from a group grants or revokes their role and authentication to the associated domain or project. OpenStackClient A command-line interface for several OpenStack services including the Identity API. For example, a user can run the openstack service create and openstack endpoint create commands to register services in their OpenStack installation. Project A container that groups or isolates resources or identity objects. Depending on the service operator, a project might map to a customer, account, organization, or tenant. Region An Identity service API v3 entity. Represents a general division in an OpenStack deployment. You can associate zero or more sub-regions with a region to make a tree-like structured hierarchy. Although a region does not have a geographical connotation, a deployment can use a geographical name for a region, such as us-east . Role A personality with a defined set of user rights and privileges to perform a specific set of operations. The Identity service issues a token to a user that includes a list of roles. When a user calls a service, that service interprets the user role set, and determines to which operations or resources each role grants access. Service An OpenStack service, such as Compute (nova), Object Storage (swift), or Image service (glance), that provides one or more endpoints through which users can access resources and perform operations. Token An alpha-numeric text string that enables access to OpenStack APIs and resources. A token may be revoked at any time and is valid for a finite duration. While OpenStack Identity supports token-based authentication in this release, it intends to support additional protocols in the future. OpenStack Identity is an integration service that does not aspire to be a full-fledged identity store and management solution. User A digital representation of a person, system, or service that uses OpenStack cloud services. The Identity service validates that incoming requests are made by the user who claims to be making the call. Users have a login and can access resources by using assigned tokens. Users can be directly assigned to a particular project and behave as if they are contained in that project.","title":"Openstack Keystone"},{"location":"Openstack/Openstack Keystone/#openstack-keystone","text":"","title":"Openstack Keystone"},{"location":"Openstack/Openstack Keystone/#identity-concepts","text":"","title":"Identity concepts"},{"location":"Openstack/Openstack Keystone/#authentication","text":"The process of confirming the identity of a user. To confirm an incoming request, OpenStack Identity validates a set of credentials users supply. Initially, these credentials are a user name and password, or a user name and API key. When OpenStack Identity validates user credentials, it issues an authentication token. Users provide the token in subsequent requests.","title":"Authentication"},{"location":"Openstack/Openstack Keystone/#credentials","text":"Data that confirms the identity of the user. For example, user name and password, user name and API key, or an authentication token that the Identity service provides.","title":"Credentials"},{"location":"Openstack/Openstack Keystone/#domain","text":"An Identity service API v3 entity. Domains are a collection of projects and users that define administrative boundaries for managing Identity entities. Domains can represent an individual, company, or operator-owned space. They expose administrative activities directly to system users. Users can be granted the administrator role for a domain. A domain administrator can create projects, users, and groups in a domain and assign roles to users and groups in a domain.","title":"Domain"},{"location":"Openstack/Openstack Keystone/#endpoint","text":"A network-accessible address, usually a URL, through which you can access a service. If you are using an extension for templates, you can create an endpoint template that represents the templates of all consumable services that are available across the regions.","title":"Endpoint"},{"location":"Openstack/Openstack Keystone/#group","text":"An Identity service API v3 entity. Groups are a collection of users owned by a domain. A group role, granted to a domain or project, applies to all users in the group. Adding or removing users to or from a group grants or revokes their role and authentication to the associated domain or project.","title":"Group"},{"location":"Openstack/Openstack Keystone/#openstackclient","text":"A command-line interface for several OpenStack services including the Identity API. For example, a user can run the openstack service create and openstack endpoint create commands to register services in their OpenStack installation.","title":"OpenStackClient"},{"location":"Openstack/Openstack Keystone/#project","text":"A container that groups or isolates resources or identity objects. Depending on the service operator, a project might map to a customer, account, organization, or tenant.","title":"Project"},{"location":"Openstack/Openstack Keystone/#region","text":"An Identity service API v3 entity. Represents a general division in an OpenStack deployment. You can associate zero or more sub-regions with a region to make a tree-like structured hierarchy. Although a region does not have a geographical connotation, a deployment can use a geographical name for a region, such as us-east .","title":"Region"},{"location":"Openstack/Openstack Keystone/#role","text":"A personality with a defined set of user rights and privileges to perform a specific set of operations. The Identity service issues a token to a user that includes a list of roles. When a user calls a service, that service interprets the user role set, and determines to which operations or resources each role grants access.","title":"Role"},{"location":"Openstack/Openstack Keystone/#service","text":"An OpenStack service, such as Compute (nova), Object Storage (swift), or Image service (glance), that provides one or more endpoints through which users can access resources and perform operations.","title":"Service"},{"location":"Openstack/Openstack Keystone/#token","text":"An alpha-numeric text string that enables access to OpenStack APIs and resources. A token may be revoked at any time and is valid for a finite duration. While OpenStack Identity supports token-based authentication in this release, it intends to support additional protocols in the future. OpenStack Identity is an integration service that does not aspire to be a full-fledged identity store and management solution.","title":"Token"},{"location":"Openstack/Openstack Keystone/#user","text":"A digital representation of a person, system, or service that uses OpenStack cloud services. The Identity service validates that incoming requests are made by the user who claims to be making the call. Users have a login and can access resources by using assigned tokens. Users can be directly assigned to a particular project and behave as if they are contained in that project.","title":"User"},{"location":"Openstack/Openstack_Block Storage/","text":"Openstack_Block Storage The Openstack Block Storage service works through the interaction of a series of daemon processes named cinder-* that reside persistently on the host machine or machines. Cinder \u67b6\u6784 graph TD A1[cinder-api] B1[cinder-volume] C1[volume provider] C2[cinder database] C3[Queue] D1[cinder-scheduler] A1 --> C3 B1 --> C3 D1 --> C3 B1 --> C1 B1 --> C2 D1 --> C2 cinder-api \u63a5\u6536 API \u8bf7\u6c42\uff0c\u8c03\u7528 cinder-volume cinder-volume \u7ba1\u7406 volume \u7684\u670d\u52a1\uff0c\u4e0e volume provider \u534f\u8c03\u5de5\u4f5c\uff0c\u7ba1\u7406 volume \u7684\u751f\u547d\u5468\u671f\u3002\u8fd0\u884c cinder-volume \u670d\u52a1\u7684\u8282\u70b9\u88ab\u79f0\u4f5c\u4e3a\u5b58\u50a8\u8282\u70b9\u3002 cinder-scheduler scheduler \u901a\u8fc7\u8c03\u5ea6\u7b97\u6cd5\u9009\u62e9\u6700\u5408\u9002\u7684\u5b58\u50a8\u8282\u70b9\u521b\u5efa volume volume provider \u6570\u636e\u7684\u5b58\u50a8\u8bbe\u5907\uff0c\u4e3a volume \u63d0\u4f9b\u7269\u7406\u5b58\u50a8\u7a7a\u95f4 cinder-volume \u652f\u6301\u591a\u79cd volume provider\uff0c\u6bcf\u79cd volume provider \u901a\u8fc7\u81ea\u5df1\u7684 driver \u4e0ecinder-volume \u534f\u8c03\u5de5\u4f5c Message Queue Cinder \u5404\u4e2a\u5b50\u670d\u52a1\u901a\u8fc7\u6d88\u606f\u5bf9\u6d88\u606f\u961f\u5217\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\u548c\u76f8\u4e92\u534f\u4f5c\u3002\u56e0\u4e3a\u6709\u4e86\u6d88\u606f\u5bf9\u5217\uff0c\u5b50\u670d\u52a1\u4e4b\u95f4\u5b9e\u73b0\u4e86\u89e3\u8026\uff0c\u8fd9\u79cd\u677e\u6563\u7684\u7ed3\u6784\u4e5f\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u91cd\u8981\u7279\u5f81\u3002 Database Cinder \u6709\u4e00\u4e9b\u6570\u636e\u9700\u8981\u5b58\u653e\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528 MySQL\u3002\u6570\u636e\u5e93\u662f\u5b89\u88c5\u5728\u63a7\u5236\u8282\u70b9\u4e0a\u7684\u3002","title":"Openstack Block Storage"},{"location":"Openstack/Openstack_Block Storage/#openstack_block-storage","text":"The Openstack Block Storage service works through the interaction of a series of daemon processes named cinder-* that reside persistently on the host machine or machines.","title":"Openstack_Block Storage"},{"location":"Openstack/Openstack_Block Storage/#cinder","text":"graph TD A1[cinder-api] B1[cinder-volume] C1[volume provider] C2[cinder database] C3[Queue] D1[cinder-scheduler] A1 --> C3 B1 --> C3 D1 --> C3 B1 --> C1 B1 --> C2 D1 --> C2","title":"Cinder \u67b6\u6784"},{"location":"Openstack/Openstack_Block Storage/#cinder-api","text":"\u63a5\u6536 API \u8bf7\u6c42\uff0c\u8c03\u7528 cinder-volume","title":"cinder-api"},{"location":"Openstack/Openstack_Block Storage/#cinder-volume","text":"\u7ba1\u7406 volume \u7684\u670d\u52a1\uff0c\u4e0e volume provider \u534f\u8c03\u5de5\u4f5c\uff0c\u7ba1\u7406 volume \u7684\u751f\u547d\u5468\u671f\u3002\u8fd0\u884c cinder-volume \u670d\u52a1\u7684\u8282\u70b9\u88ab\u79f0\u4f5c\u4e3a\u5b58\u50a8\u8282\u70b9\u3002","title":"cinder-volume"},{"location":"Openstack/Openstack_Block Storage/#cinder-scheduler","text":"scheduler \u901a\u8fc7\u8c03\u5ea6\u7b97\u6cd5\u9009\u62e9\u6700\u5408\u9002\u7684\u5b58\u50a8\u8282\u70b9\u521b\u5efa volume","title":"cinder-scheduler"},{"location":"Openstack/Openstack_Block Storage/#volume-provider","text":"\u6570\u636e\u7684\u5b58\u50a8\u8bbe\u5907\uff0c\u4e3a volume \u63d0\u4f9b\u7269\u7406\u5b58\u50a8\u7a7a\u95f4 cinder-volume \u652f\u6301\u591a\u79cd volume provider\uff0c\u6bcf\u79cd volume provider \u901a\u8fc7\u81ea\u5df1\u7684 driver \u4e0ecinder-volume \u534f\u8c03\u5de5\u4f5c","title":"volume provider"},{"location":"Openstack/Openstack_Block Storage/#message-queue","text":"Cinder \u5404\u4e2a\u5b50\u670d\u52a1\u901a\u8fc7\u6d88\u606f\u5bf9\u6d88\u606f\u961f\u5217\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u901a\u4fe1\u548c\u76f8\u4e92\u534f\u4f5c\u3002\u56e0\u4e3a\u6709\u4e86\u6d88\u606f\u5bf9\u5217\uff0c\u5b50\u670d\u52a1\u4e4b\u95f4\u5b9e\u73b0\u4e86\u89e3\u8026\uff0c\u8fd9\u79cd\u677e\u6563\u7684\u7ed3\u6784\u4e5f\u662f\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u91cd\u8981\u7279\u5f81\u3002","title":"Message Queue"},{"location":"Openstack/Openstack_Block Storage/#database","text":"Cinder \u6709\u4e00\u4e9b\u6570\u636e\u9700\u8981\u5b58\u653e\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528 MySQL\u3002\u6570\u636e\u5e93\u662f\u5b89\u88c5\u5728\u63a7\u5236\u8282\u70b9\u4e0a\u7684\u3002","title":"Database"},{"location":"Openstack/Openstack_Log/","text":"Openstack_Log \u65e5\u5fd7\u683c\u5f0f Openstack \u7684\u65e5\u5fd7\u683c\u5f0f\u90fd\u662f\u7edf\u4e00\u7684\uff0c\u5982\u4e0b <\u65f6\u95f4\u6233> <\u65e5\u5fd7\u7b49\u7ea7> <\u4ee3\u7801\u6a21\u5757> <\u65e5\u5fd7\u5185\u5bb9> <\u6e90\u4ee3\u7801\u4f4d\u7f6e> \u65e5\u5fd7\u8bb0\u5f55\u7684\u65f6\u95f4\uff0c\u5305\u62ec \u5e74 \u6708 \u65e5 \u65f6 \u5206 \u79d2 \u6beb\u79d2 \u6709INFO WARNING ERROR DEBUG \u7b49 \u5f53\u524d\u8fd0\u884c\u7684\u6a21\u5757 \u65e5\u5fd7\u4f1a\u8bb0\u5f55\u8fde\u7eed\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u533a\u5206\u548c\u589e\u52a0\u53ef\u8bfb\u6027\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u88ab\u5206\u914d\u552f\u4e00\u7684Request ID\uff0c\u4fbf\u4e8e\u67e5\u627e \u8fd9\u662f\u65e5\u5fd7\u7684\u4e3b\u4f53\uff0c\u8bb0\u5f55\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u64cd\u4f5c\u548c\u7ed3\u679c\u7b49\u91cd\u8981\u4fe1\u606f \u65e5\u5fd7\u4ee3\u7801\u7684\u4f4d\u7f6e\uff0c\u5305\u62ec\u65b9\u6cd5\u540d\u79f0\uff0c\u6e90\u4ee3\u7801\u6587\u4ef6\u7684\u76ee\u5f55\u4f4d\u7f6e\u548c\u884c\u53f7\u3002\u8fd9\u4e00\u9879\u4e0d\u662f\u6240\u6709\u65e5\u5fd7\u90fd\u6709","title":"Openstack_Log"},{"location":"Openstack/Openstack_Log/#openstack_log","text":"","title":"Openstack_Log"},{"location":"Openstack/Openstack_Log/#_1","text":"Openstack \u7684\u65e5\u5fd7\u683c\u5f0f\u90fd\u662f\u7edf\u4e00\u7684\uff0c\u5982\u4e0b <\u65f6\u95f4\u6233> <\u65e5\u5fd7\u7b49\u7ea7> <\u4ee3\u7801\u6a21\u5757> <\u65e5\u5fd7\u5185\u5bb9> <\u6e90\u4ee3\u7801\u4f4d\u7f6e> \u65e5\u5fd7\u8bb0\u5f55\u7684\u65f6\u95f4\uff0c\u5305\u62ec \u5e74 \u6708 \u65e5 \u65f6 \u5206 \u79d2 \u6beb\u79d2 \u6709INFO WARNING ERROR DEBUG \u7b49 \u5f53\u524d\u8fd0\u884c\u7684\u6a21\u5757 \u65e5\u5fd7\u4f1a\u8bb0\u5f55\u8fde\u7eed\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u533a\u5206\u548c\u589e\u52a0\u53ef\u8bfb\u6027\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u88ab\u5206\u914d\u552f\u4e00\u7684Request ID\uff0c\u4fbf\u4e8e\u67e5\u627e \u8fd9\u662f\u65e5\u5fd7\u7684\u4e3b\u4f53\uff0c\u8bb0\u5f55\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u64cd\u4f5c\u548c\u7ed3\u679c\u7b49\u91cd\u8981\u4fe1\u606f \u65e5\u5fd7\u4ee3\u7801\u7684\u4f4d\u7f6e\uff0c\u5305\u62ec\u65b9\u6cd5\u540d\u79f0\uff0c\u6e90\u4ee3\u7801\u6587\u4ef6\u7684\u76ee\u5f55\u4f4d\u7f6e\u548c\u884c\u53f7\u3002\u8fd9\u4e00\u9879\u4e0d\u662f\u6240\u6709\u65e5\u5fd7\u90fd\u6709","title":"\u65e5\u5fd7\u683c\u5f0f"},{"location":"Openstack/Openstack_ML2 Core Plugin/","text":"Openstack_ML2 Core Plugin What Moduler Layer 2 (ML2) \u662f Neutron \u5728 Havana \u7248\u672c\u5b9e\u540c\u4e00\u4e2a\u65b0\u7684 core plugin\uff0c\u7528\u4e8e\u66ff\u4ee3\u539f\u6709\u7684 linux bridge plugin \u548c openstack vswitch plugin Why \u4f20\u7edf core plugin \u7684\u95ee\u9898\uff1a \u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u591a\u79cd network provider \u200b","title":"Openstack ML2 Core Plugin"},{"location":"Openstack/Openstack_ML2 Core Plugin/#openstack_ml2-core-plugin","text":"","title":"Openstack_ML2 Core Plugin"},{"location":"Openstack/Openstack_ML2 Core Plugin/#what","text":"Moduler Layer 2 (ML2) \u662f Neutron \u5728 Havana \u7248\u672c\u5b9e\u540c\u4e00\u4e2a\u65b0\u7684 core plugin\uff0c\u7528\u4e8e\u66ff\u4ee3\u539f\u6709\u7684 linux bridge plugin \u548c openstack vswitch plugin","title":"What"},{"location":"Openstack/Openstack_ML2 Core Plugin/#why","text":"\u4f20\u7edf core plugin \u7684\u95ee\u9898\uff1a \u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u591a\u79cd network provider \u200b","title":"Why"},{"location":"Openstack/Openstack_Neutron Server/","text":"Openstack_Neutron Server \u5206\u5c42\u6a21\u578b Core API \u5bf9\u5916\u63d0\u4f9b\u7ba1\u7406 network\uff0c subnet \u548c port \u7684RESTful API Extension API \u5bf9\u5916\u63d0\u4f9b\u7ba1\u7406 route, load balance, firewall \u7b49\u8d44\u6e90\u7684 RESTful API Common Service \u8ba4\u8bc1\u548c\u6821\u9a8c API \u8bf7\u6c42 Neutron Core Neutron server \u7684\u6838\u5fc3\u5904\u7406\u7a0b\u5e8f\uff0c\u901a\u8fc7\u8c03\u7528\u76f8\u5e94\u7684 Plugin \u5904\u7406\u8bf7\u6c42 Core Plugin API \u5b9a\u4e49\u4e86 Core Plugin \u7684\u62bd\u8c61\u529f\u80fd\u96c6\u5408\uff0cNeutron Core \u901a\u8fc7\u8be5 API \u8c03\u7528\u76f8\u5e94\u7684 Core Plugin Extension Plugin API \u5b9a\u4e49\u4e86 Service Plugin \u62bd\u8c61\u529f\u80fd\u96c6\u5408\uff0cNeutron Core \u901a\u8fc7\u8be5 API \u8c03\u7528\u76f8\u5e94\u7684 Service Plugin Core Plugin \u5b9e\u73b0\u4e86 Core Plugin API\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u7ef4\u62a4 network, subnet \u548c port \u7684\u72b6\u6001\uff0c\u5e76\u8d1f\u8d23\u8c03\u7528\u76f8\u5e94\u7684 agent \u5728 network provider \u4e0a\u6267\u884c\u76f8\u5173\u64cd\u4f5c\uff0c\u6bd4\u5982\u521b\u5efa network Service Plugin \u5b9e\u73b0\u4e86 Extension Plugin API\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u7ef4\u62a4 route, load balance, security group \u7b49\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u5e76\u8d1f\u8d23\u8c03\u7528\u76f8\u5e94\u7684 agent \u5728 network provider \u4e0a\u6267\u884c\u76f8\u5173\u64cd\u4f5c\uff0c\u6bd4\u5982\u521b\u5efa router \u5f52\u7eb3\u8d77\u6765\uff0cNeutron Server \u5305\u62ec\u4e24\u90e8\u5206\uff1a \u63d0\u4f9b API \u670d\u52a1 \u8fd0\u884c Plugin","title":"Openstack Neutron Server"},{"location":"Openstack/Openstack_Neutron Server/#openstack_neutron-server","text":"","title":"Openstack_Neutron Server \u5206\u5c42\u6a21\u578b"},{"location":"Openstack/Openstack_Neutron Server/#core-api","text":"\u5bf9\u5916\u63d0\u4f9b\u7ba1\u7406 network\uff0c subnet \u548c port \u7684RESTful API","title":"Core API"},{"location":"Openstack/Openstack_Neutron Server/#extension-api","text":"\u5bf9\u5916\u63d0\u4f9b\u7ba1\u7406 route, load balance, firewall \u7b49\u8d44\u6e90\u7684 RESTful API","title":"Extension API"},{"location":"Openstack/Openstack_Neutron Server/#common-service","text":"\u8ba4\u8bc1\u548c\u6821\u9a8c API \u8bf7\u6c42","title":"Common Service"},{"location":"Openstack/Openstack_Neutron Server/#neutron-core","text":"Neutron server \u7684\u6838\u5fc3\u5904\u7406\u7a0b\u5e8f\uff0c\u901a\u8fc7\u8c03\u7528\u76f8\u5e94\u7684 Plugin \u5904\u7406\u8bf7\u6c42","title":"Neutron Core"},{"location":"Openstack/Openstack_Neutron Server/#core-plugin-api","text":"\u5b9a\u4e49\u4e86 Core Plugin \u7684\u62bd\u8c61\u529f\u80fd\u96c6\u5408\uff0cNeutron Core \u901a\u8fc7\u8be5 API \u8c03\u7528\u76f8\u5e94\u7684 Core Plugin","title":"Core Plugin API"},{"location":"Openstack/Openstack_Neutron Server/#extension-plugin-api","text":"\u5b9a\u4e49\u4e86 Service Plugin \u62bd\u8c61\u529f\u80fd\u96c6\u5408\uff0cNeutron Core \u901a\u8fc7\u8be5 API \u8c03\u7528\u76f8\u5e94\u7684 Service Plugin","title":"Extension Plugin API"},{"location":"Openstack/Openstack_Neutron Server/#core-plugin","text":"\u5b9e\u73b0\u4e86 Core Plugin API\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u7ef4\u62a4 network, subnet \u548c port \u7684\u72b6\u6001\uff0c\u5e76\u8d1f\u8d23\u8c03\u7528\u76f8\u5e94\u7684 agent \u5728 network provider \u4e0a\u6267\u884c\u76f8\u5173\u64cd\u4f5c\uff0c\u6bd4\u5982\u521b\u5efa network","title":"Core Plugin"},{"location":"Openstack/Openstack_Neutron Server/#service-plugin","text":"\u5b9e\u73b0\u4e86 Extension Plugin API\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u7ef4\u62a4 route, load balance, security group \u7b49\u8d44\u6e90\u7684\u72b6\u6001\uff0c\u5e76\u8d1f\u8d23\u8c03\u7528\u76f8\u5e94\u7684 agent \u5728 network provider \u4e0a\u6267\u884c\u76f8\u5173\u64cd\u4f5c\uff0c\u6bd4\u5982\u521b\u5efa router","title":"Service Plugin"},{"location":"Openstack/Openstack_Neutron Server/#neutron-server","text":"\u63d0\u4f9b API \u670d\u52a1 \u8fd0\u884c Plugin","title":"\u5f52\u7eb3\u8d77\u6765\uff0cNeutron Server \u5305\u62ec\u4e24\u90e8\u5206\uff1a"},{"location":"Openstack/Openstack_Neutron_Concept/","text":"Openstack_Neutron_Concept Neutron \u7ba1\u7406\u7684\u7f51\u7edc\u8d44\u6e90\u5305\u62ec Netwrk, subnet, \u548c port Network network \u662f\u4e00\u4e2a\u9694\u79bb\u7684\u4e8c\u5c42\u5e7f\u64ad\u57df\u3002Neutron \u652f\u6301\u591a\u79cd\u7c7b\u4f3c\u7684 network\uff0c\u5305\u62ec local, flat, vlan, vxlan, gre network \u5fc5\u987b\u5c5e\u4e8e\u67d0\u4eba Projec\uff0cProject \u4e2d\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a network\u3002network \u4e0e project \u662f\u591a\u5bf9\u4e00\u5173\u7cfb local local \u7f51\u7edc\u4e0e\u5176\u4ed6\u7f51\u7edc\u548c\u8282\u70b9\u9694\u79bb\u3002local \u7f51\u7edc\u4e2d\u7684 instance \u53ea\u80fd\u4e0e\u4f4d\u4e8e\u540c\u4e00\u8282\u70b9\u4e0a\u540c\u4e00\u7f51\u7edc\u7684 instance \u901a\u4fe1\uff0clocal \u7f51\u7edc\u4e3b\u8981\u7528\u4e8e\u5355\u673a\u6d4b\u8bd5\u3002 flat flat \u7f51\u7edc\u662f\u65e0 vlan tagging \u7684\u7f51\u7edc\u3002flat \u7f51\u7edc\u4e2d\u7684 instance \u80fd\u4e0e\u4f4d\u4e8e\u540c\u4e00\u7f51\u7edc\u7684 instance \u901a\u4fe1\uff0c\u5e76\u4e14\u53ef\u4ee5\u8de8\u591a\u4e2a\u8282\u70b9 vlan vlan \u7f51\u7edc\u662f\u5177\u6709 802.1q tagging \u7684\u7f51\u7edc\u3002vlan \u662f\u4e00\u4e2a\u4e8c\u5c42\u7684\u5e7f\u64ad\u57df\uff0c\u540c\u4e00 vlan \u4e2d\u7684 instance \u53ef\u4ee5\u901a\u4fe1\uff0c\u4e0d\u540c vlan \u53ea\u80fd\u901a\u8fc7 router \u901a\u4fe1\u3002vlan \u7f51\u7edc\u53ef\u8de8\u8282\u70b9\uff0c\u662f\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u7f51\u7edc\u7c7b\u578b\u3002 vxlan vxlan \u662f\u57fa\u4e8e\u96a7\u9053\u6280\u672f\u7684 overlay \u7f51\u7edc\u3002vxlan \u7f51\u7edc\u901a\u8fc7\u552f\u4e00\u7684 segmentation ID(\u4e5f\u79f0 VNI )\u4e0e\u5176\u4ed6 vxlan \u7f51\u7edc\u533a\u5206\u3002vxlan \u4e2d\u6570\u636e\u5305\u4f1a\u901a\u8fc7 VNI \u5c01\u88c5\u6210 UDP \u5305\u8fdb\u884c\u4f20\u8f93\u3002\u56e0\u4e3a\u4e8c\u5c42\u7684\u5305\u901a\u8fc7\u5c01\u88c5\u5728\u4e09\u5c42\u4f20\u8f93\uff0c\u80fd\u591f\u514b\u670d vlan \u548c\u7269\u7406\u7f51\u7edc\u57fa\u7840\u8bbe\u65bd\u7684\u9650\u5236\u3002 gre gre \u662f\u4e0e vxlan \u7c7b\u4f3c\u7684\u4e00\u79cd overlay \u7f51\u7edc\u3002\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u4f7f\u7528 IP \u5305\u800c\u975e UDP \u8fdb\u884c\u5c01\u88c5\u3002 Subnet subnet \u662f\u4e00\u4e2a IPv4 \u6216\u8005 IPv6 \u5730\u5740\u6bb5\u3002instance \u7684 IP \u4ece subnet \u4e2d\u5206\u914d\u3002\u6bcf\u4e2a subnet \u9700\u8981\u5b9a\u4e49 IP \u5730\u5740\u7684\u8303\u56f4\u548c\u63a9\u7801\u3002 subnet \u4e0e network \u662f\u591a\u5bf9\u4e00\u5173\u7cfb\u3002\u4e00\u4e2a network \u53ef\u4ee5\u6709\u591a\u4e2a subnet\uff0c\u8fd9\u4e9b subnet \u53ef\u4ee5\u662f\u4e0d\u540c\u7684 IP \u6bb5\uff0c\u4f46\u4e0d\u80fd\u91cd\u53e0\u3002 \u5982\u679c subnet \u5728\u4e0d\u540c\u7684 network \u4e2d\uff0cCIDR \u548c IP \u90fd\u662f\u53ef\u4ee5\u91cd\u53e0\u7684 Port port \u53ef\u4ee5\u770b\u505a\u865a\u62df\u4ea4\u6362\u673a\u4e0a\u7684\u4e00\u4e2a\u7aef\u53e3 port \u4e0a\u5b9a\u4e49\u4e86 MAC \u5730\u5740\u548c IP \u5730\u5740\uff0c\u5f53 instance \u7684\u865a\u62df\u7f51\u5361 VIF(Virtual Interface)\u7ed1\u5b9a\u5230port\u65f6\uff0cport \u4f1a\u5c06 MAC \u548c IP \u5206\u914d\u7ed9 VIF port \u4e0e subnet \u662f\u4e00\u5bf9\u591a\u5173\u7cfb\u3002\u4e00\u4e2a port \u5fc5\u987b\u5c5e\u4e8e\u67d0\u4e2a subnet\uff1b\u4e00\u4e2a subnet \u53ef\u4ee5\u6709\u591a\u4eba port \u603b\u7ed3","title":"Openstack Neutron Concept"},{"location":"Openstack/Openstack_Neutron_Concept/#openstack_neutron_concept","text":"Neutron \u7ba1\u7406\u7684\u7f51\u7edc\u8d44\u6e90\u5305\u62ec Netwrk, subnet, \u548c port","title":"Openstack_Neutron_Concept"},{"location":"Openstack/Openstack_Neutron_Concept/#network","text":"network \u662f\u4e00\u4e2a\u9694\u79bb\u7684\u4e8c\u5c42\u5e7f\u64ad\u57df\u3002Neutron \u652f\u6301\u591a\u79cd\u7c7b\u4f3c\u7684 network\uff0c\u5305\u62ec local, flat, vlan, vxlan, gre network \u5fc5\u987b\u5c5e\u4e8e\u67d0\u4eba Projec\uff0cProject \u4e2d\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a network\u3002network \u4e0e project \u662f\u591a\u5bf9\u4e00\u5173\u7cfb","title":"Network"},{"location":"Openstack/Openstack_Neutron_Concept/#local","text":"local \u7f51\u7edc\u4e0e\u5176\u4ed6\u7f51\u7edc\u548c\u8282\u70b9\u9694\u79bb\u3002local \u7f51\u7edc\u4e2d\u7684 instance \u53ea\u80fd\u4e0e\u4f4d\u4e8e\u540c\u4e00\u8282\u70b9\u4e0a\u540c\u4e00\u7f51\u7edc\u7684 instance \u901a\u4fe1\uff0clocal \u7f51\u7edc\u4e3b\u8981\u7528\u4e8e\u5355\u673a\u6d4b\u8bd5\u3002","title":"local"},{"location":"Openstack/Openstack_Neutron_Concept/#flat","text":"flat \u7f51\u7edc\u662f\u65e0 vlan tagging \u7684\u7f51\u7edc\u3002flat \u7f51\u7edc\u4e2d\u7684 instance \u80fd\u4e0e\u4f4d\u4e8e\u540c\u4e00\u7f51\u7edc\u7684 instance \u901a\u4fe1\uff0c\u5e76\u4e14\u53ef\u4ee5\u8de8\u591a\u4e2a\u8282\u70b9","title":"flat"},{"location":"Openstack/Openstack_Neutron_Concept/#vlan","text":"vlan \u7f51\u7edc\u662f\u5177\u6709 802.1q tagging \u7684\u7f51\u7edc\u3002vlan \u662f\u4e00\u4e2a\u4e8c\u5c42\u7684\u5e7f\u64ad\u57df\uff0c\u540c\u4e00 vlan \u4e2d\u7684 instance \u53ef\u4ee5\u901a\u4fe1\uff0c\u4e0d\u540c vlan \u53ea\u80fd\u901a\u8fc7 router \u901a\u4fe1\u3002vlan \u7f51\u7edc\u53ef\u8de8\u8282\u70b9\uff0c\u662f\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u7f51\u7edc\u7c7b\u578b\u3002","title":"vlan"},{"location":"Openstack/Openstack_Neutron_Concept/#vxlan","text":"vxlan \u662f\u57fa\u4e8e\u96a7\u9053\u6280\u672f\u7684 overlay \u7f51\u7edc\u3002vxlan \u7f51\u7edc\u901a\u8fc7\u552f\u4e00\u7684 segmentation ID(\u4e5f\u79f0 VNI )\u4e0e\u5176\u4ed6 vxlan \u7f51\u7edc\u533a\u5206\u3002vxlan \u4e2d\u6570\u636e\u5305\u4f1a\u901a\u8fc7 VNI \u5c01\u88c5\u6210 UDP \u5305\u8fdb\u884c\u4f20\u8f93\u3002\u56e0\u4e3a\u4e8c\u5c42\u7684\u5305\u901a\u8fc7\u5c01\u88c5\u5728\u4e09\u5c42\u4f20\u8f93\uff0c\u80fd\u591f\u514b\u670d vlan \u548c\u7269\u7406\u7f51\u7edc\u57fa\u7840\u8bbe\u65bd\u7684\u9650\u5236\u3002","title":"vxlan"},{"location":"Openstack/Openstack_Neutron_Concept/#gre","text":"gre \u662f\u4e0e vxlan \u7c7b\u4f3c\u7684\u4e00\u79cd overlay \u7f51\u7edc\u3002\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u4f7f\u7528 IP \u5305\u800c\u975e UDP \u8fdb\u884c\u5c01\u88c5\u3002","title":"gre"},{"location":"Openstack/Openstack_Neutron_Concept/#subnet","text":"subnet \u662f\u4e00\u4e2a IPv4 \u6216\u8005 IPv6 \u5730\u5740\u6bb5\u3002instance \u7684 IP \u4ece subnet \u4e2d\u5206\u914d\u3002\u6bcf\u4e2a subnet \u9700\u8981\u5b9a\u4e49 IP \u5730\u5740\u7684\u8303\u56f4\u548c\u63a9\u7801\u3002 subnet \u4e0e network \u662f\u591a\u5bf9\u4e00\u5173\u7cfb\u3002\u4e00\u4e2a network \u53ef\u4ee5\u6709\u591a\u4e2a subnet\uff0c\u8fd9\u4e9b subnet \u53ef\u4ee5\u662f\u4e0d\u540c\u7684 IP \u6bb5\uff0c\u4f46\u4e0d\u80fd\u91cd\u53e0\u3002 \u5982\u679c subnet \u5728\u4e0d\u540c\u7684 network \u4e2d\uff0cCIDR \u548c IP \u90fd\u662f\u53ef\u4ee5\u91cd\u53e0\u7684","title":"Subnet"},{"location":"Openstack/Openstack_Neutron_Concept/#port","text":"port \u53ef\u4ee5\u770b\u505a\u865a\u62df\u4ea4\u6362\u673a\u4e0a\u7684\u4e00\u4e2a\u7aef\u53e3 port \u4e0a\u5b9a\u4e49\u4e86 MAC \u5730\u5740\u548c IP \u5730\u5740\uff0c\u5f53 instance \u7684\u865a\u62df\u7f51\u5361 VIF(Virtual Interface)\u7ed1\u5b9a\u5230port\u65f6\uff0cport \u4f1a\u5c06 MAC \u548c IP \u5206\u914d\u7ed9 VIF port \u4e0e subnet \u662f\u4e00\u5bf9\u591a\u5173\u7cfb\u3002\u4e00\u4e2a port \u5fc5\u987b\u5c5e\u4e8e\u67d0\u4e2a subnet\uff1b\u4e00\u4e2a subnet \u53ef\u4ee5\u6709\u591a\u4eba port","title":"Port"},{"location":"Openstack/Openstack_Neutron_Concept/#_1","text":"","title":"\u603b\u7ed3"},{"location":"Openstack/Openstack_Neutron_T/","text":"Openstack_Neutron Network\u3001subnet\u3001port \u64cd\u4f5c\u4e0a\uff0c\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u53ea\u4f1a\u5728\u6570\u636e\u5e93\u4e2d\u8bb0\u5f55\uff0c\u800c\u4e0d\u4f1a\u88ab\u521b\u5efa\uff0c\u53ea\u6709port\u88ab\u8fde\u63a5\u65f6\uff0c\u624d\u4f1a\u5728\u8282\u70b9\u8fdb\u884c\u5177\u4f53\u5b9e\u73b0\u3002 \u865a\u62df\u673a\u8fc1\u79fb\u4f1a\u4fdd\u7559\u539ftap\u4fe1\u606f\u8fdb\u884c\u8fc1\u79fb\uff0c\u539f\u56e0\u662f\u865a\u62df\u673a\u662f\u8fde\u63a5\u4e86Port\uff0c\u800cport\u5c5e\u4e8esubnet\uff0c\u5e76\u4e0d\u5c5e\u4e8e\u865a\u62df\u673a tap \u8bbe\u5907\u5728\u5bbf\u4e3b\u673a\u4e0a\u7684mac\u5730\u5740\u4e0eport mac\u5730\u5740\u5e76\u4e0d\u4e00\u81f4 /etc/neutron/dhcp_agent.ini dhcp_driver\uff1a\u4f7f\u7528 dnsmasp \u5b9e\u73b0dhcp interface_driver\uff1a\u4f7f\u7528 linux bridge \u8fde\u63a5 DHCP namespace interface \u5f53\u521b\u5efanetwork \u5e76\u5728 subnet \u4e0a enable dhcp \u65f6\uff0c\u7f51\u7edc\u8282\u70b9\u4e0a\u7684 dhcp agent \u4f1a\u542f\u52a8\u4e00\u4e2a dnsmasq \u8fdb\u7a0b\u4e3a\u8be5 network \u63d0\u4f9b dhcp \u670d\u52a1\u3002dnsmasq \u4e0e network \u662f\u4e00\u5bf9\u4e00\u5173\u7cfb network_vlan_ranges = default:3001:4000 \u53ea\u662f\u5bf9\u666e\u901a\u7528\u6237\u9650\u5236\uff0c\u4e0d\u4f1a\u5bf9\u7ba1\u7406\u5458\u9650\u5236 dhcp\u3001route \u90fd\u6709\u81ea\u5df1\u5355\u72ec\u7684\u547d\u540d\u7a7a\u95f4 \u8bbe\u5907\u547d\u540d linux bridge:brq*** tap:tap*** namespace: dhcp:qdhcp-* router:qrouter-* dhcp:ns-* \u5185\u90e8qr-xxx \u5916\u90e8qg-xxx qvo qvb","title":"Openstack Neutron T"},{"location":"Openstack/Openstack_Neutron_T/#openstack_neutron","text":"Network\u3001subnet\u3001port \u64cd\u4f5c\u4e0a\uff0c\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u53ea\u4f1a\u5728\u6570\u636e\u5e93\u4e2d\u8bb0\u5f55\uff0c\u800c\u4e0d\u4f1a\u88ab\u521b\u5efa\uff0c\u53ea\u6709port\u88ab\u8fde\u63a5\u65f6\uff0c\u624d\u4f1a\u5728\u8282\u70b9\u8fdb\u884c\u5177\u4f53\u5b9e\u73b0\u3002 \u865a\u62df\u673a\u8fc1\u79fb\u4f1a\u4fdd\u7559\u539ftap\u4fe1\u606f\u8fdb\u884c\u8fc1\u79fb\uff0c\u539f\u56e0\u662f\u865a\u62df\u673a\u662f\u8fde\u63a5\u4e86Port\uff0c\u800cport\u5c5e\u4e8esubnet\uff0c\u5e76\u4e0d\u5c5e\u4e8e\u865a\u62df\u673a tap \u8bbe\u5907\u5728\u5bbf\u4e3b\u673a\u4e0a\u7684mac\u5730\u5740\u4e0eport mac\u5730\u5740\u5e76\u4e0d\u4e00\u81f4 /etc/neutron/dhcp_agent.ini dhcp_driver\uff1a\u4f7f\u7528 dnsmasp \u5b9e\u73b0dhcp interface_driver\uff1a\u4f7f\u7528 linux bridge \u8fde\u63a5 DHCP namespace interface \u5f53\u521b\u5efanetwork \u5e76\u5728 subnet \u4e0a enable dhcp \u65f6\uff0c\u7f51\u7edc\u8282\u70b9\u4e0a\u7684 dhcp agent \u4f1a\u542f\u52a8\u4e00\u4e2a dnsmasq \u8fdb\u7a0b\u4e3a\u8be5 network \u63d0\u4f9b dhcp \u670d\u52a1\u3002dnsmasq \u4e0e network \u662f\u4e00\u5bf9\u4e00\u5173\u7cfb network_vlan_ranges = default:3001:4000 \u53ea\u662f\u5bf9\u666e\u901a\u7528\u6237\u9650\u5236\uff0c\u4e0d\u4f1a\u5bf9\u7ba1\u7406\u5458\u9650\u5236 dhcp\u3001route \u90fd\u6709\u81ea\u5df1\u5355\u72ec\u7684\u547d\u540d\u7a7a\u95f4","title":"Openstack_Neutron"},{"location":"Openstack/Openstack_Neutron_T/#_1","text":"linux bridge:brq*** tap:tap*** namespace: dhcp:qdhcp-* router:qrouter-* dhcp:ns-* \u5185\u90e8qr-xxx \u5916\u90e8qg-xxx qvo qvb","title":"\u8bbe\u5907\u547d\u540d"},{"location":"Openstack/Openstack_Policy.json/","text":"Openstack_Policy.json \u5173\u952e\u70b9 Any changes to policy.json are effective immediately, which allows new policies to be immediately, which allows new policies to be implemented while the service is running. A policy.json file is a text file JSON(Javascript Object Notation) format. Each policy is defined by a one-line statement in the form \" \":\" \". The policy target, also named \"action\", represents an API call like \"Start an instance\" or \"attach a volume\". The policy target, also named \"action\", represents an API call like \"start an instance \" or \"attach a volume\". \u53e5\u6cd5 A policy.json file consists \u7531...\u7ec4\u6210vi. of policies and aliases of the form target:rule or alias:definition , separated separated by commas \u9017\u53f7.n and enclosed \u653e\u5165vt. in curly \u5377\u7531\u7684adj. braces \u5927\u62ec\u53f7n. : { \"alias 1\":\"definition 1\", \"alias 2\":\"definition 2\", ... \"target 1\":\"rule 1\", \"target 2\":\"rule 2\", ... } Targets are APIs and are written \"service:API\" or simply \"API\". For example, \"compute:create\" or \"add_image\" . Rules determine wheter the API call is allowed. Rules can be: always true. The action is always permitted. This can be written as \"\"(empty string), [], or \"@\" always false. The action is never permitted. Written as \"!\". a special check a comparison \u6bd4\u8f83 of two values boolean expressions \u8868\u8fbe\u5f0f base on simpler rules Special checks are <role>:<role name> , a test whether the API credentials contain \u5305\u542bvt. this role. <rule>:<rule name> , the definition of an alias. http:<target URL> , which delegates \u4ee3\u8868 the check to a remote server. The API is authorized when the server returns True. Developers can define additional special checks. Two values are compared \u6bd4\u8f83\u7684adj. in the following way: \"value1:value2\" Possible values are constants \u5e38\u91cfn. : Strings, numbers, true , false API attributes target object attriutes the flag is admin API attributes can be project_id , user_id , or domain_id . Target object attributes are fields \u5b57\u6bb5n. from the object description in the database. For example in the case \u60c5\u51b5\uff1b\u5b9e\u4f8b.n of the \"compute:start\" API, the object is the instance to be started. The policy for starting instances could use the %(project id)s attribute, that is the project that owns the instance. The trailing \u5c3e\u90e8adj. s indicates \u8868\u660ev. this s a string. is_admin indicates that administrative privileges \u7279\u6743n. are granted \u6388\u4e88vt. via the admin token mechanism \u673a\u5236n. (the --os-token option of the keystone command). The admin token allows initialisation \u521d\u59cb\u5316n. of he identit database bdfore the admin role exists. The alias construct \u6784\u60f3n. exists for convenience \u4fbf\u5229n. An alias is short name for a complex \u590d\u5408\u4f53n. or hard \u56f0\u96be\u7684adj. to understand rule. It is defined in the same way as a policy: alias name : alias definition Once an alias is defined, use the rule keyword to use it in a policy rule. Reference The policy.json file","title":"Openstack_Policy.json"},{"location":"Openstack/Openstack_Policy.json/#openstack_policyjson","text":"","title":"Openstack_Policy.json"},{"location":"Openstack/Openstack_Policy.json/#_1","text":"Any changes to policy.json are effective immediately, which allows new policies to be immediately, which allows new policies to be implemented while the service is running. A policy.json file is a text file JSON(Javascript Object Notation) format. Each policy is defined by a one-line statement in the form \" \":\" \". The policy target, also named \"action\", represents an API call like \"Start an instance\" or \"attach a volume\". The policy target, also named \"action\", represents an API call like \"start an instance \" or \"attach a volume\".","title":"\u5173\u952e\u70b9"},{"location":"Openstack/Openstack_Policy.json/#_2","text":"A policy.json file consists \u7531...\u7ec4\u6210vi. of policies and aliases of the form target:rule or alias:definition , separated separated by commas \u9017\u53f7.n and enclosed \u653e\u5165vt. in curly \u5377\u7531\u7684adj. braces \u5927\u62ec\u53f7n. : { \"alias 1\":\"definition 1\", \"alias 2\":\"definition 2\", ... \"target 1\":\"rule 1\", \"target 2\":\"rule 2\", ... } Targets are APIs and are written \"service:API\" or simply \"API\". For example, \"compute:create\" or \"add_image\" . Rules determine wheter the API call is allowed. Rules can be: always true. The action is always permitted. This can be written as \"\"(empty string), [], or \"@\" always false. The action is never permitted. Written as \"!\". a special check a comparison \u6bd4\u8f83 of two values boolean expressions \u8868\u8fbe\u5f0f base on simpler rules Special checks are <role>:<role name> , a test whether the API credentials contain \u5305\u542bvt. this role. <rule>:<rule name> , the definition of an alias. http:<target URL> , which delegates \u4ee3\u8868 the check to a remote server. The API is authorized when the server returns True. Developers can define additional special checks. Two values are compared \u6bd4\u8f83\u7684adj. in the following way: \"value1:value2\" Possible values are constants \u5e38\u91cfn. : Strings, numbers, true , false API attributes target object attriutes the flag is admin API attributes can be project_id , user_id , or domain_id . Target object attributes are fields \u5b57\u6bb5n. from the object description in the database. For example in the case \u60c5\u51b5\uff1b\u5b9e\u4f8b.n of the \"compute:start\" API, the object is the instance to be started. The policy for starting instances could use the %(project id)s attribute, that is the project that owns the instance. The trailing \u5c3e\u90e8adj. s indicates \u8868\u660ev. this s a string. is_admin indicates that administrative privileges \u7279\u6743n. are granted \u6388\u4e88vt. via the admin token mechanism \u673a\u5236n. (the --os-token option of the keystone command). The admin token allows initialisation \u521d\u59cb\u5316n. of he identit database bdfore the admin role exists. The alias construct \u6784\u60f3n. exists for convenience \u4fbf\u5229n. An alias is short name for a complex \u590d\u5408\u4f53n. or hard \u56f0\u96be\u7684adj. to understand rule. It is defined in the same way as a policy: alias name : alias definition Once an alias is defined, use the rule keyword to use it in a policy rule.","title":"\u53e5\u6cd5"},{"location":"Openstack/Openstack_Policy.json/#reference","text":"The policy.json file","title":"Reference"},{"location":"Openstack/Openstack_Tenant_to_Resource/","text":"Openstack_Tenant_to_Resource set_env #modify the env below if you need export OS_USERNAME=dc1_admin export OS_TENANT_NAME=dc_system_dc1 export OS_REGION_NAME=az1.dc1 export OS_AUTH_URL=https://identity.az1.dc1.hwcloud.com:443/identity/v2.0 export OS_PASSWORD=$password export NOVA_ENDPOINT_TYPE=internalURL export OS_ENDPOINT_TYPE=internalURL export CINDER_ENDPOINT_TYPE=internalURL export OS_VOLUME_API_VERSION=2 export BASE_BOND=brcps \u7531\u4e0a\u53ef\u77e5,Client\u83b7\u5f97\u4ee5\u4e0b\u4fe1\u606f\uff1a project region keystone_url","title":"Openstack Tenant to Resource"},{"location":"Openstack/Openstack_Tenant_to_Resource/#openstack_tenant_to_resource","text":"","title":"Openstack_Tenant_to_Resource"},{"location":"Openstack/Openstack_Tenant_to_Resource/#set_env","text":"#modify the env below if you need export OS_USERNAME=dc1_admin export OS_TENANT_NAME=dc_system_dc1 export OS_REGION_NAME=az1.dc1 export OS_AUTH_URL=https://identity.az1.dc1.hwcloud.com:443/identity/v2.0 export OS_PASSWORD=$password export NOVA_ENDPOINT_TYPE=internalURL export OS_ENDPOINT_TYPE=internalURL export CINDER_ENDPOINT_TYPE=internalURL export OS_VOLUME_API_VERSION=2 export BASE_BOND=brcps \u7531\u4e0a\u53ef\u77e5,Client\u83b7\u5f97\u4ee5\u4e0b\u4fe1\u606f\uff1a project region keystone_url","title":"set_env"},{"location":"Openstack/json/","text":"JSON\u603b\u7ed3 what JSON \u6307\u7684\u662f JavaScript \u5bf9\u8c61\u8868\u793a\u6cd5( j ava s cript O bject N otation) JSON \u662f\u8f7b\u91cf\u7ea7\u7684\u6587\u672c\u6570\u636e\u4ea4\u6362\u683c\u5f0f JSON \u6587\u4ef6\u7684\u6587\u4ef6\u7c7b\u578b\u662f\".json\" JSON \u6587\u672c\u7684 MIME \u7c7b\u578b\u662f\"application/json\" JSON \u540d\u79f0/\u503c\u5bf9 \u540d\u79f0/\u503c\u5bf9\u5305\u62ec\u5b57\u6bb5\u540d\u79f0\uff08\u5728\u53cc\u5f15\u53f7\u4e2d\uff09\uff0c\u540e\u9762\u5199\u4e00\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u662f\u503c\uff1a \"name\" : \"convex\" JSON \u503c \u6570\u5b57\uff08\u6574\u6570\u6216\u6d6e\u70b9\u6570\uff09 \u5b57\u7b26\u4e32\uff08\u5728\u53cc\u5f15\u53f7\u4e2d\uff09 \u903b\u8f91\u503c\uff08true \u6216 false\uff09 \u6570\u7ec4\uff08\u5728\u4e2d\u62ec\u53f7\u4e2d\uff09 \u6570\u7ec4\u53ef\u5305\u542b\u591a\u4e2a\u5bf9\u8c61 \u5bf9\u8c61\uff08\u5728\u5927\u62ec\u53f7\u4e2d\uff09 \u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u540d\u79f0/\u503c\u5bf9 null","title":"Json"},{"location":"Openstack/json/#json","text":"","title":"JSON\u603b\u7ed3"},{"location":"Openstack/json/#what","text":"JSON \u6307\u7684\u662f JavaScript \u5bf9\u8c61\u8868\u793a\u6cd5( j ava s cript O bject N otation) JSON \u662f\u8f7b\u91cf\u7ea7\u7684\u6587\u672c\u6570\u636e\u4ea4\u6362\u683c\u5f0f JSON \u6587\u4ef6\u7684\u6587\u4ef6\u7c7b\u578b\u662f\".json\" JSON \u6587\u672c\u7684 MIME \u7c7b\u578b\u662f\"application/json\"","title":"what"},{"location":"Openstack/json/#json_1","text":"\u540d\u79f0/\u503c\u5bf9\u5305\u62ec\u5b57\u6bb5\u540d\u79f0\uff08\u5728\u53cc\u5f15\u53f7\u4e2d\uff09\uff0c\u540e\u9762\u5199\u4e00\u4e2a\u5192\u53f7\uff0c\u7136\u540e\u662f\u503c\uff1a \"name\" : \"convex\"","title":"JSON \u540d\u79f0/\u503c\u5bf9"},{"location":"Openstack/json/#json_2","text":"\u6570\u5b57\uff08\u6574\u6570\u6216\u6d6e\u70b9\u6570\uff09 \u5b57\u7b26\u4e32\uff08\u5728\u53cc\u5f15\u53f7\u4e2d\uff09 \u903b\u8f91\u503c\uff08true \u6216 false\uff09 \u6570\u7ec4\uff08\u5728\u4e2d\u62ec\u53f7\u4e2d\uff09 \u6570\u7ec4\u53ef\u5305\u542b\u591a\u4e2a\u5bf9\u8c61 \u5bf9\u8c61\uff08\u5728\u5927\u62ec\u53f7\u4e2d\uff09 \u5bf9\u8c61\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u540d\u79f0/\u503c\u5bf9 null","title":"JSON \u503c"}]}