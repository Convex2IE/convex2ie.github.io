{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Convex's blog For full documentation visit convex . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-convexs-blog","text":"For full documentation visit convex .","title":"Welcome to Convex's blog"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"Solutus quod custodia probatis Marmoreo ulli coruscant vasti tenentibus sentit mactatos Lorem markdownum nunc . Misce praestantior sic corona stabis gigantas ferre tellusAndros facti, corpus quid nomen ausa ossa. Genitas nimium. Arsit et in scire Bacchi orantem, armentum natamque feruntur. Aemula coniuge ante magnis, non Thesea peteret flumina tremoribus procul Pleuronius deducens. Deorum cana, me auras celer, iam est obortis pectore tum tardius nimbi? Faciem concepit. Corpus tamen fit super crimine opus cumque Auxilium sternitque admonitu horto ad amictus siquis. Vires fragosis Aricinae erat me locis pendebant tum, lex nisi oculos inpune et tactus. Ferunt vestra Anienis letique frigus et Pheneon omnia, in navem et Alcyonen iam citharae verba at. Ab pocula vellera amantes cornicis pater repercusso virum Achilles; Myscelus et. Fons saltumque hoc ratis semper tumidus metus, pectebant, virtuti, centumque fulmina dirusque pastoris de magno. Mihi sanguine Icelon, non et vana tales: verba enim et . Inductus paranti pendere fertilis novas sinus in colla sanguine liquidum et praebuit telluris. Perque saevum voce, ire figura omni stratis remisit Latinum; quateret victor Imbreus circumspicit umbrarum. Postquam corporeusque figitur condebat humus nutritur nolis, ille at referemus cunctis iter quoque memini et. Aquilone Asida . Visus radiis mensis fuerit feror praemia a Ter opus, nec secus hoc cur obscurum tuentur Pario hic suarum adversum iaculante leones curvarique tempus. Quibus non et ipso, quis patre, Pyrrha ultra virilia placat. Vellem visu erubuere movet asper, ignara sit diversas me custodia pontus flos aequatam, turba. Ire remorata peterem, et atque apros. Sospes fractaque mersit turbata Haud ferrum trahat Vero tantum prolem utque Suadet non indulsit preme mare transtulit affata Fames cum aureus cum tauri Argolicas quod percussit coniunx salibus coeptis tenues. Hic fer cernit, vultum ferre non altera vixque !","title":"About"},{"location":"about/#solutus-quod-custodia-probatis","text":"","title":"Solutus quod custodia probatis"},{"location":"about/#marmoreo-ulli-coruscant-vasti-tenentibus-sentit-mactatos","text":"Lorem markdownum nunc . Misce praestantior sic corona stabis gigantas ferre tellusAndros facti, corpus quid nomen ausa ossa. Genitas nimium. Arsit et in scire Bacchi orantem, armentum natamque feruntur. Aemula coniuge ante magnis, non Thesea peteret flumina tremoribus procul Pleuronius deducens. Deorum cana, me auras celer, iam est obortis pectore tum tardius nimbi? Faciem concepit.","title":"Marmoreo ulli coruscant vasti tenentibus sentit mactatos"},{"location":"about/#corpus-tamen-fit-super-crimine-opus-cumque","text":"Auxilium sternitque admonitu horto ad amictus siquis. Vires fragosis Aricinae erat me locis pendebant tum, lex nisi oculos inpune et tactus. Ferunt vestra Anienis letique frigus et Pheneon omnia, in navem et Alcyonen iam citharae verba at. Ab pocula vellera amantes cornicis pater repercusso virum Achilles; Myscelus et. Fons saltumque hoc ratis semper tumidus metus, pectebant, virtuti, centumque fulmina dirusque pastoris de magno. Mihi sanguine Icelon, non et vana tales: verba enim et . Inductus paranti pendere fertilis novas sinus in colla sanguine liquidum et praebuit telluris. Perque saevum voce, ire figura omni stratis remisit Latinum; quateret victor Imbreus circumspicit umbrarum. Postquam corporeusque figitur condebat humus nutritur nolis, ille at referemus cunctis iter quoque memini et. Aquilone Asida .","title":"Corpus tamen fit super crimine opus cumque"},{"location":"about/#visus-radiis-mensis-fuerit-feror-praemia-a","text":"Ter opus, nec secus hoc cur obscurum tuentur Pario hic suarum adversum iaculante leones curvarique tempus. Quibus non et ipso, quis patre, Pyrrha ultra virilia placat. Vellem visu erubuere movet asper, ignara sit diversas me custodia pontus flos aequatam, turba. Ire remorata peterem, et atque apros. Sospes fractaque mersit turbata Haud ferrum trahat Vero tantum prolem utque Suadet non indulsit preme mare transtulit affata Fames cum aureus cum tauri Argolicas quod percussit coniunx salibus coeptis tenues. Hic fer cernit, vultum ferre non altera vixque !","title":"Visus radiis mensis fuerit feror praemia a"},{"location":"namespaces/","text":"NameSpaces A namespace wraps a global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource. Changes to the global resource are visible to other processes that are members of the namespace, but are invisible to other processes. One use of namespaces is to implement containers. Linux provides the following namespaces: Namespace Constant Isolates Cgroup CLONE_NEWCGROUP Cgroup root directory IPC CLONE_NEWIPC System V IPC, POSIX message queues Network CLONE_NEWNET Network devices, stacks, ports, etc. Mount CLONE_NEWNS Mount points PID CLONE_NEWPID Process IDs User CLONE_NEWUSER User and group IDs UTS CLONE_NEWUTS Hostname and NIS domain name cgroup namespace cgroup Linux control groups. Control cgroups, usually referred to as cgroups, are a Linux kernel feature which allow processes to be organized into hierarchical groups whose usage of various types of resources can then be limited and monitored. The kernel's cgroup interface is provided through a pseudo-filesystem called cgroupfs. Grouping is implemented in the core cgroup kernel code, while resource tracking and limits are implemented in a set of per-resource-type subsystems (memory, CPU, and so on). IPC namespaces IPC namespaces isolate certain IPC resources, namely, System V IPC objects (see svipc(7)) and (since Linux 2.6.30) POSIX message queues (see mq_overview(7)). The common characteristic of these IPC mechanisms is that IPC objects are identified by mechanisms other than filesystem pathnames. Each IPC namespace has its own set of System V IPC identifiers and its own POSIX message queue filesystem. Objects created in an IPC namespace are visible to all other processes that are members of that namespace, but are not visible to processes in other IPC namespaces. Network namespaces Network namespaces provide isolation of the system resources associated with networking: network devices, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net directory (which is a symbolic link to /proc/PID/net), the /sys/class/net directory, various files under /proc/sys/net, port numbers (sockets), and so on. In addition, network namespaces isolate the UNIX domain abstract socket namespace (see unix(7)). A physical network device can live in exactly one network namespace. When a network namespace is freed (i.e., when the last process in the namespace terminates), its physical network devices are moved back to the initial network namespace (not to the parent of the process). A virtual network (veth(4)) device pair provides a pipe-like abstraction that can be used to create tunnels between network namespaces, and can be used to create a bridge to a physical network device in another namespace. When a namespace is freed, the veth(4) devices that it contains are destroyed. Use of network namespaces requires a kernel that is configured with the CONFIG_NET_NS option. Mount namespaces Mount namespaces provide isolation of the list of mount points seen by the processes in each namespace instance. Thus, the processes in each of the mount namespace instances will see distinct single-directory hierarchies. The views provided by the /proc/[pid]/mounts, /proc/[pid]/mountinfo, and /proc/[pid]/mountstats files (all described in proc(5)) correspond to the mount namespace in which the process with the PID [pid] resides. (All of the processes that reside in the same mount namespace will see the same view in these files.) When a process creates a new mount namespace using clone(2) or unshare(2) with the CLONE_NEWNS flag, the mount point list for the new namespace is a copy of the caller's mount point list. Subsequent modifications to the mount point list (mount(2) and umount(2)) in either mount namespace will not (by default) affect the mount point list seen in the other namespace (but see the following discussion of shared subtrees). PID namespaces PID namespaces isolate the process ID number space, meaning that processes in different PID namespaces can have the same PID. PID namespaces allow containers to provide func tionality such as suspending/resuming the set of processes in the container and migrating the container to a new host while the processes inside the container maintain the same PIDs. PIDs in a new PID namespace start at 1, somewhat like a standalone system, and calls to fork(2), vfork(2), or clone(2) will produce processes with PIDs that are unique within the namespace. Use of PID namespaces requires a kernel that is configured with the CONFIG_PID_NS option. User namespaces User namespaces isolate security-related identifiers and attributes, in particular, user IDs and group IDs (see credentials(7)), the root directory, keys (see keyrings(7)), and capabilities (see capabilities(7)). A process's user and group IDs can be different inside and outside a user namespace. In particular, a process can have a normal unprivileged user ID outside a user namespace while at the same time having a user ID of 0 inside the namespace; in other words, the process has full privileges for operations inside the user namespace, but is unprivileged for operations outside the namespace. UTS namespaces UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain name. These identifiers are set using sethostname(2) and setdomainname(2), and can be retrieved using uname(2), gethostname(2), and getdomainname(2).","title":"namespaces"},{"location":"namespaces/#namespaces","text":"A namespace wraps a global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource. Changes to the global resource are visible to other processes that are members of the namespace, but are invisible to other processes. One use of namespaces is to implement containers. Linux provides the following namespaces: Namespace Constant Isolates Cgroup CLONE_NEWCGROUP Cgroup root directory IPC CLONE_NEWIPC System V IPC, POSIX message queues Network CLONE_NEWNET Network devices, stacks, ports, etc. Mount CLONE_NEWNS Mount points PID CLONE_NEWPID Process IDs User CLONE_NEWUSER User and group IDs UTS CLONE_NEWUTS Hostname and NIS domain name","title":"NameSpaces"},{"location":"namespaces/#cgroup-namespace","text":"","title":"cgroup namespace"},{"location":"namespaces/#cgroup","text":"Linux control groups. Control cgroups, usually referred to as cgroups, are a Linux kernel feature which allow processes to be organized into hierarchical groups whose usage of various types of resources can then be limited and monitored. The kernel's cgroup interface is provided through a pseudo-filesystem called cgroupfs. Grouping is implemented in the core cgroup kernel code, while resource tracking and limits are implemented in a set of per-resource-type subsystems (memory, CPU, and so on).","title":"cgroup"},{"location":"namespaces/#ipc-namespaces","text":"IPC namespaces isolate certain IPC resources, namely, System V IPC objects (see svipc(7)) and (since Linux 2.6.30) POSIX message queues (see mq_overview(7)). The common characteristic of these IPC mechanisms is that IPC objects are identified by mechanisms other than filesystem pathnames. Each IPC namespace has its own set of System V IPC identifiers and its own POSIX message queue filesystem. Objects created in an IPC namespace are visible to all other processes that are members of that namespace, but are not visible to processes in other IPC namespaces.","title":"IPC namespaces"},{"location":"namespaces/#network-namespaces","text":"Network namespaces provide isolation of the system resources associated with networking: network devices, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net directory (which is a symbolic link to /proc/PID/net), the /sys/class/net directory, various files under /proc/sys/net, port numbers (sockets), and so on. In addition, network namespaces isolate the UNIX domain abstract socket namespace (see unix(7)). A physical network device can live in exactly one network namespace. When a network namespace is freed (i.e., when the last process in the namespace terminates), its physical network devices are moved back to the initial network namespace (not to the parent of the process). A virtual network (veth(4)) device pair provides a pipe-like abstraction that can be used to create tunnels between network namespaces, and can be used to create a bridge to a physical network device in another namespace. When a namespace is freed, the veth(4) devices that it contains are destroyed. Use of network namespaces requires a kernel that is configured with the CONFIG_NET_NS option.","title":"Network namespaces"},{"location":"namespaces/#mount-namespaces","text":"Mount namespaces provide isolation of the list of mount points seen by the processes in each namespace instance. Thus, the processes in each of the mount namespace instances will see distinct single-directory hierarchies. The views provided by the /proc/[pid]/mounts, /proc/[pid]/mountinfo, and /proc/[pid]/mountstats files (all described in proc(5)) correspond to the mount namespace in which the process with the PID [pid] resides. (All of the processes that reside in the same mount namespace will see the same view in these files.) When a process creates a new mount namespace using clone(2) or unshare(2) with the CLONE_NEWNS flag, the mount point list for the new namespace is a copy of the caller's mount point list. Subsequent modifications to the mount point list (mount(2) and umount(2)) in either mount namespace will not (by default) affect the mount point list seen in the other namespace (but see the following discussion of shared subtrees).","title":"Mount namespaces"},{"location":"namespaces/#pid-namespaces","text":"PID namespaces isolate the process ID number space, meaning that processes in different PID namespaces can have the same PID. PID namespaces allow containers to provide func tionality such as suspending/resuming the set of processes in the container and migrating the container to a new host while the processes inside the container maintain the same PIDs. PIDs in a new PID namespace start at 1, somewhat like a standalone system, and calls to fork(2), vfork(2), or clone(2) will produce processes with PIDs that are unique within the namespace. Use of PID namespaces requires a kernel that is configured with the CONFIG_PID_NS option.","title":"PID namespaces"},{"location":"namespaces/#user-namespaces","text":"User namespaces isolate security-related identifiers and attributes, in particular, user IDs and group IDs (see credentials(7)), the root directory, keys (see keyrings(7)), and capabilities (see capabilities(7)). A process's user and group IDs can be different inside and outside a user namespace. In particular, a process can have a normal unprivileged user ID outside a user namespace while at the same time having a user ID of 0 inside the namespace; in other words, the process has full privileges for operations inside the user namespace, but is unprivileged for operations outside the namespace.","title":"User namespaces"},{"location":"namespaces/#uts-namespaces","text":"UTS namespaces provide isolation of two system identifiers: the hostname and the NIS domain name. These identifiers are set using sethostname(2) and setdomainname(2), and can be retrieved using uname(2), gethostname(2), and getdomainname(2).","title":"UTS namespaces"}]}